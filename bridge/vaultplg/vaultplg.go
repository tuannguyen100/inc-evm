// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package vaultplg

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// VaultBurnInstData is an auto generated low-level Go binding around an user-defined struct.
type VaultBurnInstData struct {
	Meta   uint8
	Shard  uint8
	Token  common.Address
	To     common.Address
	Amount *big.Int
	Itx    [32]byte
}

// VaultplgMetaData contains all meta data concerning the Vaultplg contract.
var VaultplgMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"incognitoAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newIncognitoProxy\",\"type\":\"address\"}],\"name\":\"UpdateIncognitoProxy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"UpdateTokenTotal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ETH_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"incognitoAddress\",\"type\":\"string\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"incognitoAddress\",\"type\":\"string\"}],\"name\":\"depositERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipientToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exchangeAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"timestamp\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signData\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getDepositedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_prevVault\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"isSigDataUsed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"isWithdrawed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"migration\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"notEntered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"inst\",\"type\":\"bytes\"}],\"name\":\"parseBurnInst\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"meta\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"shard\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"itx\",\"type\":\"bytes32\"}],\"internalType\":\"structVault.BurnInstData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prevVault\",\"outputs\":[{\"internalType\":\"contractWithdrawable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"incognitoAddress\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"timestamp\",\"type\":\"bytes\"}],\"name\":\"requestWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"sigDataUsed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signData\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"sigToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"inst\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"heights\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"instPaths\",\"type\":\"bytes32[]\"},{\"internalType\":\"bool[]\",\"name\":\"instPathIsLefts\",\"type\":\"bool[]\"},{\"internalType\":\"bytes32\",\"name\":\"instRoots\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"blkData\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"sigIdxs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"sigVs\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"sigRs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"sigSs\",\"type\":\"bytes32[]\"}],\"name\":\"submitBurnProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalDepositedToSCAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"updateAssets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"inst\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"heights\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"instPaths\",\"type\":\"bytes32[]\"},{\"internalType\":\"bool[]\",\"name\":\"instPathIsLefts\",\"type\":\"bool[]\"},{\"internalType\":\"bytes32\",\"name\":\"instRoots\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"blkData\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"sigIdxs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"sigVs\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"sigRs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"sigSs\",\"type\":\"bytes32[]\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawRequests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"withdrawed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "0x60806040526001600560146101000a81548160ff0219169083151502179055506000600560156101000a81548160ff02191690831515021790555034801561004657600080fd5b506156f480620000576000396000f3fe60806040526004361061014f5760003560e01c80637e16e6e1116100b6578063c4d66de81161006f578063c4d66de8146104dd578063cf54aaa014610506578063dca40d9e14610543578063e4bd707414610580578063f75b98ce146105bd578063fa84702e146105fa57610156565b80637e16e6e1146103d75780638588ccd61461041457806387add44014610430578063995fac1114610459578063a26e118614610496578063a3f5d8cc146104b257610156565b80635a67cb87116101085780635a67cb87146102915780636304541c146102ba57806365b5a00f146102f757806370a082311461033457806373bf965114610371578063749c5f861461039a57610156565b80631beb7de21461015b5780631ea1940e146101845780631ed4276d146101c1578063392e53cd146101fe5780633fec6b401461022957806358bc83371461026657610156565b3661015657005b600080fd5b34801561016757600080fd5b50610182600480360381019061017d91906145d0565b610625565b005b34801561019057600080fd5b506101ab60048036038101906101a69190614512565b610ca8565b6040516101b89190614ffe565b60405180910390f35b3480156101cd57600080fd5b506101e860048036038101906101e39190614474565b610cc8565b6040516101f59190614ffe565b60405180910390f35b34801561020a57600080fd5b5061021361104e565b6040516102209190614ffe565b60405180910390f35b34801561023557600080fd5b50610250600480360381019061024b919061457c565b611061565b60405161025d9190614e64565b60405180910390f35b34801561027257600080fd5b5061027b6110ef565b6040516102889190614e64565b60405180910390f35b34801561029d57600080fd5b506102b860048036038101906102b39190614408565b6110f4565b005b3480156102c657600080fd5b506102e160048036038101906102dc9190614274565b61146c565b6040516102ee9190615234565b60405180910390f35b34801561030357600080fd5b5061031e600480360381019061031991906142d9565b611484565b60405161032b9190615234565b60405180910390f35b34801561034057600080fd5b5061035b60048036038101906103569190614274565b6114a9565b6040516103689190615234565b60405180910390f35b34801561037d57600080fd5b50610398600480360381019061039391906145d0565b611578565b005b3480156103a657600080fd5b506103c160048036038101906103bc9190614512565b611baa565b6040516103ce9190614ffe565b60405180910390f35b3480156103e357600080fd5b506103fe60048036038101906103f9919061453b565b611ced565b60405161040b919061518b565b60405180910390f35b61042e60048036038101906104299190614315565b611e08565b005b34801561043c57600080fd5b5061045760048036038101906104529190614798565b61258f565b005b34801561046557600080fd5b50610480600480360381019061047b91906142d9565b6129d0565b60405161048d9190614ffe565b60405180910390f35b6104b060048036038101906104ab9190614753565b6129ff565b005b3480156104be57600080fd5b506104c7612b2f565b6040516104d49190614ffe565b60405180910390f35b3480156104e957600080fd5b5061050460048036038101906104ff9190614274565b612b42565b005b34801561051257600080fd5b5061052d60048036038101906105289190614274565b612c19565b60405161053a919061524f565b60405180910390f35b34801561054f57600080fd5b5061056a60048036038101906105659190614512565b612ca5565b6040516105779190614ffe565b60405180910390f35b34801561058c57600080fd5b506105a760048036038101906105a29190614512565b612cc5565b6040516105b49190614ffe565b60405180910390f35b3480156105c957600080fd5b506105e460048036038101906105df91906142d9565b612e09565b6040516105f19190615234565b60405180910390f35b34801561060657600080fd5b5061060f6130bd565b60405161061c919061514e565b60405180910390f35b600560149054906101000a900460ff1661063f60016130e3565b90610680576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106779190615169565b60405180910390fd5b506000600560146101000a81548160ff02191690831515021790555060828a5110156106ac60066130e3565b906106ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e49190615169565b60405180910390fd5b506106f6613d90565b6106ff8b611ced565b90506099816000015160ff1614801561071f57506001816020015160ff16145b61072960066130e3565b9061076a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107619190615169565b60405180910390fd5b506107788160a00151611baa565b1561078360056130e3565b906107c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107bb9190615169565b60405180910390fd5b5060016000808360a00151815260200190815260200160002060006101000a81548160ff021916908315150217905550600073ffffffffffffffffffffffffffffffffffffffff16816040015173ffffffffffffffffffffffffffffffffffffffff1614156108db5761088760046000836040015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054826080015161329390919063ffffffff16565b47101561089460076130e3565b906108d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108cc9190615169565b60405180910390fd5b50610a59565b60006108ea8260400151612c19565b905060098160ff1611156109225761091860098260ff1603600a0a836080015161332d90919063ffffffff16565b8260800181815250505b61097c60046000846040015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054836080015161329390919063ffffffff16565b826040015173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016109b99190614e7f565b60206040518083038186803b1580156109d157600080fd5b505afa1580156109e5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a099190614864565b1015610a1560076130e3565b90610a56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4d9190615169565b60405180910390fd5b50505b610a6b8b8b8b8b8b8b8b8b8b8b6133ce565b600073ffffffffffffffffffffffffffffffffffffffff16816040015173ffffffffffffffffffffffffffffffffffffffff161415610b6b576000816060015173ffffffffffffffffffffffffffffffffffffffff168260800151604051610ad290614e4f565b60006040518083038185875af1925050503d8060008114610b0f576040519150601f19603f3d011682016040523d82523d6000602084013e610b14565b606091505b5050905080610b2360046130e3565b90610b64576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b5b9190615169565b60405180910390fd5b5050610c39565b806040015173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb826060015183608001516040518363ffffffff1660e01b8152600401610bb2929190614ed1565b600060405180830381600087803b158015610bcc57600080fd5b505af1158015610be0573d6000803e3d6000fd5b50505050610bec6134f9565b610bf660046130e3565b90610c37576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c2e9190615169565b60405180910390fd5b505b7f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb816040015182606001518360800151604051610c7893929190614f23565b60405180910390a1506001600560146101000a81548160ff02191690831515021790555050505050505050505050565b60016020528060005260406000206000915054906101000a900460ff1681565b60008073ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614158015610d755750600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b610d7f600c6130e3565b90610dc0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610db79190615169565b60405180910390fd5b50828290508585905014610dd4600a6130e3565b90610e15576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e0c9190615169565b60405180910390fd5b50600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635c975abb6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e7e57600080fd5b505afa158015610e92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb691906144e9565b610ec0600d6130e3565b90610f01576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ef89190615169565b60405180910390fd5b5060005b8585905081101561100457610f94848483818110610f1f57fe5b9050602002013560046000898986818110610f3657fe5b9050602002016020810190610f4b9190614274565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461329390919063ffffffff16565b60046000888885818110610fa457fe5b9050602002016020810190610fb99190614274565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508080600101915050610f05565b507f6a7fbbcddfd518bb8c56b28ac6c7acb0f7ca093ed232eb3306e53d14e469895f8585858560405161103a9493929190614fc3565b60405180910390a160019050949350505050565b600560159054906101000a900460ff1681565b6000806000806020860151915060408601519250601b8660408151811061108457fe5b602001015160f81c60f81b60f81c019050600185828486604051600081526020016040526040516110b89493929190615109565b6020604051602081039080840390855afa1580156110da573d6000803e3d6000fd5b50505060206040510351935050505092915050565b600081565b600560149054906101000a900460ff1661110e60016130e3565b9061114f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111469190615169565b60405180910390fd5b506000600560146101000a81548160ff0219169083151502179055506000849050600061117b86612c19565b905060008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016111b89190614e7f565b60206040518083038186803b1580156111d057600080fd5b505afa1580156111e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112089190614864565b90506000819050600087905060098460ff16111561124b5760098460ff1603600a0a818161123257fe5b04905060098460ff1603600a0a838161124757fe5b0492505b670de0b6b3a7640000811115801561126b5750670de0b6b3a76400008311155b80156112915750670de0b6b3a764000061128e848361329390919063ffffffff16565b11155b61129b60036130e3565b906112dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112d39190615169565b60405180910390fd5b508473ffffffffffffffffffffffffffffffffffffffff166323b872dd33308b6040518463ffffffff1660e01b815260040161131a93929190614e9a565b600060405180830381600087803b15801561133457600080fd5b505af1158015611348573d6000803e3d6000fd5b505050506113546134f9565b61135e60046130e3565b9061139f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113969190615169565b60405180910390fd5b50876113bc836113ae8c6114a9565b61353790919063ffffffff16565b146113c7600a6130e3565b90611408576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ff9190615169565b60405180910390fd5b507f2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e8988888460405161143e9493929190614f5a565b60405180910390a150505050506001600560146101000a81548160ff02191690831515021790555050505050565b60046020528060005260406000206000915090505481565b6002602052816000526040600020602052806000526040600020600091509150505481565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156114e757479050611573565b8173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016115209190614e7f565b60206040518083038186803b15801561153857600080fd5b505afa15801561154c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115709190614864565b90505b919050565b600560149054906101000a900460ff1661159260016130e3565b906115d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115ca9190615169565b60405180910390fd5b506000600560146101000a81548160ff02191690831515021790555060828a5110156115ff60066130e3565b90611640576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116379190615169565b60405180910390fd5b50611649613d90565b6116528b611ced565b9050609a816000015160ff1614801561167257506001816020015160ff16145b61167c60066130e3565b906116bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116b49190615169565b60405180910390fd5b506116cb8160a00151611baa565b156116d660056130e3565b90611717576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161170e9190615169565b60405180910390fd5b5060016000808360a00151815260200190815260200160002060006101000a81548160ff021916908315150217905550600073ffffffffffffffffffffffffffffffffffffffff16816040015173ffffffffffffffffffffffffffffffffffffffff16141561182e576117da60046000836040015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054826080015161329390919063ffffffff16565b4710156117e760076130e3565b90611828576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161181f9190615169565b60405180910390fd5b506119ac565b600061183d8260400151612c19565b905060098160ff1611156118755761186b60098260ff1603600a0a836080015161332d90919063ffffffff16565b8260800181815250505b6118cf60046000846040015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054836080015161329390919063ffffffff16565b826040015173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161190c9190614e7f565b60206040518083038186803b15801561192457600080fd5b505afa158015611938573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061195c9190614864565b101561196860076130e3565b906119a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119a09190615169565b60405180910390fd5b50505b6119be8b8b8b8b8b8b8b8b8b8b6133ce565b611a59816080015160026000846060015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000846040015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461329390919063ffffffff16565b60026000836060015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000836040015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611b3b816080015160046000846040015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461329390919063ffffffff16565b60046000836040015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550506001600560146101000a81548160ff02191690831515021790555050505050505050505050565b600080600083815260200190815260200160002060009054906101000a900460ff1615611bda5760019050611ce8565b600073ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611c3a5760009050611ce8565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663749c5f86836040518263ffffffff1660e01b8152600401611c9591906150ee565b60206040518083038186803b158015611cad57600080fd5b505afa158015611cc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ce591906144e9565b90505b919050565b611cf5613d90565b611cfd613d90565b82600081518110611d0a57fe5b602001015160f81c60f81b60f81c816000019060ff16908160ff168152505082600181518110611d3657fe5b602001015160f81c60f81b60f81c816020019060ff16908160ff16815250506000806000806022870151935060428701519250606287015191506082870151905083856040019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505082856060019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505081856080018181525050808560a00181815250508495505050505050919050565b600560149054906101000a900460ff16611e2260016130e3565b90611e63576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e5a9190615169565b60405180910390fd5b506000600560146101000a81548160ff0219169083151502179055506000611f03611e9260048d88888f6135c0565b8a8a8a8a604051602001611eaa9594939291906151a6565b60405160208183030381529060405284848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050613665565b9050611f0f818c613789565b89600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015611f9960086130e3565b90611fda576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fd19190615169565b60405180910390fd5b5061202d8a600460008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461353790919063ffffffff16565b600460008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506120ff8a600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461353790919063ffffffff16565b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000349050600073ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff1614156121d3576121cc8b8261329390919063ffffffff16565b905061236d565b8a8c73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161220d9190614e7f565b60206040518083038186803b15801561222557600080fd5b505afa158015612239573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061225d9190614864565b101561226960076130e3565b906122aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122a19190615169565b60405180910390fd5b508b73ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8a8d6040518363ffffffff1660e01b81526004016122e6929190614f9a565b600060405180830381600087803b15801561230057600080fd5b505af1158015612314573d6000803e3d6000fd5b505050506123206134f9565b61232a60046130e3565b9061236b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123629190615169565b60405180910390fd5b505b60006123bf8b838b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508d613ac9565b905061245081600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461329390919063ffffffff16565b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061252281600460008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461329390919063ffffffff16565b600460008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050506001600560146101000a81548160ff02191690831515021790555050505050505050505050565b600560149054906101000a900460ff166125a960016130e3565b906125ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125e19190615169565b60405180910390fd5b506000600560146101000a81548160ff021916908315150217905550600061268661261960058986868b6135c0565b8a8a60405160200161262d939291906151fb565b60405160208183030381529060405286868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050613665565b90506126928188613789565b85600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561271c60086130e3565b9061275d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127549190615169565b60405180910390fd5b506127ed86600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461353790919063ffffffff16565b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506128bf86600460008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461353790919063ffffffff16565b600460008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000869050600073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff161461296c57600061294689612c19565b905060098160ff16111561296a5760098160ff1603600a0a888161296657fe5b0491505b505b7f2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e888b8b846040516129a19493929190614f5a565b60405180910390a150506001600560146101000a81548160ff0219169083151502179055505050505050505050565b60036020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b600560149054906101000a900460ff16612a1960016130e3565b90612a5a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a519190615169565b60405180910390fd5b506000600560146101000a81548160ff0219169083151502179055506b033b2e3c9fd0803ce8000000471115612a9060026130e3565b90612ad1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ac89190615169565b60405180910390fd5b507f2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e6000838334604051612b089493929190614f5a565b60405180910390a16001600560146101000a81548160ff0219169083151502179055505050565b600560149054906101000a900460ff1681565b600560159054906101000a900460ff1615612b5d600f6130e3565b90612b9e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b959190615169565b60405180910390fd5b5080600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600560156101000a81548160ff0219169083151502179055506001600560146101000a81548160ff02191690831515021790555050565b6000808290508073ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015612c6557600080fd5b505afa158015612c79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c9d9190614864565b915050919050565b60006020528060005260406000206000915054906101000a900460ff1681565b60006001600083815260200190815260200160002060009054906101000a900460ff1615612cf65760019050612e04565b600073ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415612d565760009050612e04565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e4bd7074836040518263ffffffff1660e01b8152600401612db191906150ee565b60206040518083038186803b158015612dc957600080fd5b505afa158015612ddd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e0191906144e9565b90505b919050565b60008073ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614158015612ef05750600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b1561303757613030600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f75b98ce85856040518363ffffffff1660e01b8152600401612f55929190614efa565b60206040518083038186803b158015612f6d57600080fd5b505afa158015612f81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fa59190614864565b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461329390919063ffffffff16565b90506130b7565b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b92915050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606060008260108111156130f357fe5b90506000600a905060608167ffffffffffffffff8111801561311457600080fd5b506040519080825280601f01601f1916602001820160405280156131475781602001600182028036833780820191505090505b50905060005b60008460ff16146131c8576000600a8560ff168161316757fe5b069050600a8560ff168161317757fe5b0494508060300160f81b83838060010194508151811061319357fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505061314d565b60606001820167ffffffffffffffff811180156131e457600080fd5b506040519080825280601f01601f1916602001820160405280156132175781602001600182028036833780820191505090505b50905060005b82811161328557838184038151811061323257fe5b602001015160f81c60f81b82828151811061324957fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350808060010191505061321d565b508095505050505050919050565b60008082840190508381101580156132ab5750828110155b6040518060400160405280601281526020017f536166654d61746820657863657074696f6e000000000000000000000000000081525090613322576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133199190615169565b60405180910390fd5b508091505092915050565b6000808284029050600084148061334c57508284828161334957fe5b04145b6040518060400160405280601281526020017f536166654d61746820657863657074696f6e0000000000000000000000000000815250906133c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133ba9190615169565b60405180910390fd5b508091505092915050565b60008a8a6040516020016133e3929190614e27565b604051602081830303815290604052805190602001209050613403613d5f565b73ffffffffffffffffffffffffffffffffffffffff1663f65d21166001838d8d8d8d8d8d8d8d8d6040518c63ffffffff1660e01b81526004016134509b9a99989796959493929190615019565b60206040518083038186803b15801561346857600080fd5b505afa15801561347c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134a091906144e9565b6134aa60066130e3565b906134eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016134e29190615169565b60405180910390fd5b505050505050505050505050565b600080600090503d60008114613516576020811461351f5761352b565b6001915061352b565b60206000803e60005191505b50600081141591505090565b6000828211156040518060400160405280601281526020017f536166654d61746820657863657074696f6e0000000000000000000000000000815250906135b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016135ab9190615169565b60405180910390fd5b50818303905092915050565b6135c8613dfb565b6135d0613dfb565b60405180608001604052808860058111156135e757fe5b81526020018773ffffffffffffffffffffffffffffffffffffffff16815260200186868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081526020018481525090508091505095945050505050565b6000808380519060200120905061367b81612cc5565b1561368660056130e3565b906136c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016136be9190615169565b60405180910390fd5b5060006136d48483611061565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561371160106130e3565b90613752576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016137499190615169565b60405180910390fd5b50600180600084815260200190815260200160002060006101000a81548160ff021916908315150217905550809250505092915050565b600073ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415801561386f5750600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b15613ac5576139af600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f75b98ce83856040518363ffffffff1660e01b81526004016138d4929190614efa565b60206040518083038186803b1580156138ec57600080fd5b505afa158015613900573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139249190614864565b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461329390919063ffffffff16565b600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b5050565b600080613ad5866114a9565b9050600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161415613b2257613b1f348261353790919063ffffffff16565b90505b84471015613b3060076130e3565b90613b71576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613b689190615169565b60405180910390fd5b50600060608473ffffffffffffffffffffffffffffffffffffffff168787604051613b9c9190614e10565b60006040518083038185875af1925050503d8060008114613bd9576040519150601f19603f3d011682016040523d82523d6000602084013e613bde565b606091505b509150915081613bee60046130e3565b90613c2f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613c269190615169565b60405180910390fd5b506b033b2e3c9fd0803ce8000000613c46896114a9565b1115613c5260026130e3565b90613c93576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613c8a9190615169565b60405180910390fd5b5060008082806020019051810190613cab919061429d565b915091508973ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16148015613d03575080613d0186613cf38d6114a9565b61353790919063ffffffff16565b145b613d0d60096130e3565b90613d4e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613d459190615169565b60405180910390fd5b508095505050505050949350505050565b6000807f62135fc083646fdb4e1a9d700e351b886a4a5a39da980650269edd1ade91ffd260001b9050805491505090565b6040518060c00160405280600060ff168152602001600060ff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600080191681525090565b604051806080016040528060006005811115613e1357fe5b8152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160608152602001600081525090565b600081359050613e5381615634565b92915050565b600081519050613e688161564b565b92915050565b60008083601f840112613e8057600080fd5b8235905067ffffffffffffffff811115613e9957600080fd5b602083019150836020820283011115613eb157600080fd5b9250929050565b600082601f830112613ec957600080fd5b8135613edc613ed782615297565b61526a565b91508181835260208401935060208101905083856020840282011115613f0157600080fd5b60005b83811015613f315781613f17888261410e565b845260208401935060208301925050600181019050613f04565b5050505092915050565b600082601f830112613f4c57600080fd5b8135613f5f613f5a826152bf565b61526a565b91508181835260208401935060208101905083856020840282011115613f8457600080fd5b60005b83811015613fb45781613f9a8882614138565b845260208401935060208301925050600181019050613f87565b5050505092915050565b60008083601f840112613fd057600080fd5b8235905067ffffffffffffffff811115613fe957600080fd5b60208301915083602082028301111561400157600080fd5b9250929050565b600082601f83011261401957600080fd5b813561402c614027826152e7565b61526a565b9150818183526020840193506020810190508385602084028201111561405157600080fd5b60005b8381101561408157816140678882614235565b845260208401935060208301925050600181019050614054565b5050505092915050565b600082601f83011261409c57600080fd5b81356140af6140aa8261530f565b61526a565b915081818352602084019350602081019050838560208402820111156140d457600080fd5b60005b8381101561410457816140ea888261425f565b8452602084019350602083019250506001810190506140d7565b5050505092915050565b60008135905061411d81615662565b92915050565b60008151905061413281615662565b92915050565b60008135905061414781615679565b92915050565b60008083601f84011261415f57600080fd5b8235905067ffffffffffffffff81111561417857600080fd5b60208301915083600182028301111561419057600080fd5b9250929050565b600082601f8301126141a857600080fd5b81356141bb6141b682615337565b61526a565b915080825260208301602083018583830111156141d757600080fd5b6141e28382846155ca565b50505092915050565b60008083601f8401126141fd57600080fd5b8235905067ffffffffffffffff81111561421657600080fd5b60208301915083600182028301111561422e57600080fd5b9250929050565b60008135905061424481615690565b92915050565b60008151905061425981615690565b92915050565b60008135905061426e816156a7565b92915050565b60006020828403121561428657600080fd5b600061429484828501613e44565b91505092915050565b600080604083850312156142b057600080fd5b60006142be85828601613e59565b92505060206142cf8582860161424a565b9150509250929050565b600080604083850312156142ec57600080fd5b60006142fa85828601613e44565b925050602061430b85828601613e44565b9150509250929050565b60008060008060008060008060008060e08b8d03121561433457600080fd5b60006143428d828e01613e44565b9a505060206143538d828e01614235565b99505060406143648d828e01613e44565b98505060606143758d828e01613e44565b97505060808b013567ffffffffffffffff81111561439257600080fd5b61439e8d828e0161414d565b965096505060a08b013567ffffffffffffffff8111156143bd57600080fd5b6143c98d828e0161414d565b945094505060c08b013567ffffffffffffffff8111156143e857600080fd5b6143f48d828e0161414d565b92509250509295989b9194979a5092959850565b6000806000806060858703121561441e57600080fd5b600061442c87828801613e44565b945050602061443d87828801614235565b935050604085013567ffffffffffffffff81111561445a57600080fd5b614466878288016141eb565b925092505092959194509250565b6000806000806040858703121561448a57600080fd5b600085013567ffffffffffffffff8111156144a457600080fd5b6144b087828801613e6e565b9450945050602085013567ffffffffffffffff8111156144cf57600080fd5b6144db87828801613fbe565b925092505092959194509250565b6000602082840312156144fb57600080fd5b600061450984828501614123565b91505092915050565b60006020828403121561452457600080fd5b600061453284828501614138565b91505092915050565b60006020828403121561454d57600080fd5b600082013567ffffffffffffffff81111561456757600080fd5b61457384828501614197565b91505092915050565b6000806040838503121561458f57600080fd5b600083013567ffffffffffffffff8111156145a957600080fd5b6145b585828601614197565b92505060206145c685828601614138565b9150509250929050565b6000806000806000806000806000806101408b8d0312156145f057600080fd5b60008b013567ffffffffffffffff81111561460a57600080fd5b6146168d828e01614197565b9a505060206146278d828e01614235565b99505060408b013567ffffffffffffffff81111561464457600080fd5b6146508d828e01613f3b565b98505060608b013567ffffffffffffffff81111561466d57600080fd5b6146798d828e01613eb8565b975050608061468a8d828e01614138565b96505060a061469b8d828e01614138565b95505060c08b013567ffffffffffffffff8111156146b857600080fd5b6146c48d828e01614008565b94505060e08b013567ffffffffffffffff8111156146e157600080fd5b6146ed8d828e0161408b565b9350506101008b013567ffffffffffffffff81111561470b57600080fd5b6147178d828e01613f3b565b9250506101208b013567ffffffffffffffff81111561473557600080fd5b6147418d828e01613f3b565b9150509295989b9194979a5092959850565b6000806020838503121561476657600080fd5b600083013567ffffffffffffffff81111561478057600080fd5b61478c858286016141eb565b92509250509250929050565b60008060008060008060008060a0898b0312156147b457600080fd5b600089013567ffffffffffffffff8111156147ce57600080fd5b6147da8b828c016141eb565b985098505060206147ed8b828c01613e44565b96505060406147fe8b828c01614235565b955050606089013567ffffffffffffffff81111561481b57600080fd5b6148278b828c0161414d565b9450945050608089013567ffffffffffffffff81111561484657600080fd5b6148528b828c0161414d565b92509250509295985092959890939650565b60006020828403121561487657600080fd5b60006148848482850161424a565b91505092915050565b60006148998383614923565b60208301905092915050565b60006148b18383614b6e565b60208301905092915050565b60006148c98383614b8c565b60208301905092915050565b60006148e18383614dbd565b60208301905092915050565b60006148f98383614df2565b60208301905092915050565b61490e8161555e565b82525050565b61491d816154ec565b82525050565b61492c816154da565b82525050565b61493b816154da565b82525050565b600061494d8385615430565b935061495882615363565b8060005b858110156149915761496e82846154c3565b614978888261488d565b9750614983836153ef565b92505060018101905061495c565b5085925050509392505050565b60006149a9826153ad565b6149b38185615441565b93506149be8361536d565b8060005b838110156149ef5781516149d688826148a5565b97506149e1836153fc565b9250506001810190506149c2565b5085935050505092915050565b6000614a07826153b8565b614a118185615452565b9350614a1c8361537d565b8060005b83811015614a4d578151614a3488826148bd565b9750614a3f83615409565b925050600181019050614a20565b5085935050505092915050565b6000614a668385615463565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115614a9557600080fd5b602083029250614aa68385846155ca565b82840190509392505050565b6000614abd826153c3565b614ac78185615463565b9350614ad28361538d565b8060005b83811015614b03578151614aea88826148d5565b9750614af583615416565b925050600181019050614ad6565b5085935050505092915050565b6000614b1b826153ce565b614b258185615474565b9350614b308361539d565b8060005b83811015614b61578151614b4888826148ed565b9750614b5383615423565b925050600181019050614b34565b5085935050505092915050565b614b77816154fe565b82525050565b614b86816154fe565b82525050565b614b958161550a565b82525050565b614ba48161550a565b82525050565b6000614bb68385615496565b9350614bc38385846155ca565b614bcc83615616565b840190509392505050565b6000614be2826153d9565b614bec8185615485565b9350614bfc8185602086016155d9565b614c0581615616565b840191505092915050565b6000614c1b826153d9565b614c2581856154a7565b9350614c358185602086016155d9565b80840191505092915050565b614c4a81615570565b82525050565b614c5981615594565b82525050565b6000614c6b83856154b2565b9350614c788385846155ca565b614c8183615616565b840190509392505050565b6000614c97826153e4565b614ca181856154b2565b9350614cb18185602086016155d9565b614cba81615616565b840191505092915050565b6000614cd26000836154a7565b9150600082019050919050565b60c082016000820151614cf56000850182614df2565b506020820151614d086020850182614df2565b506040820151614d1b6040850182614923565b506060820151614d2e6060850182614914565b506080820151614d416080850182614dbd565b5060a0820151614d5460a0850182614b8c565b50505050565b6000608083016000830151614d726000860182614c50565b506020830151614d856020860182614923565b5060408301518482036040860152614d9d8282614bd7565b9150506060830151614db26060860182614dbd565b508091505092915050565b614dc681615547565b82525050565b614dd581615547565b82525050565b614dec614de782615547565b61560c565b82525050565b614dfb81615551565b82525050565b614e0a81615551565b82525050565b6000614e1c8284614c10565b915081905092915050565b6000614e338285614c10565b9150614e3f8284614ddb565b6020820191508190509392505050565b6000614e5a82614cc5565b9150819050919050565b6000602082019050614e796000830184614932565b92915050565b6000602082019050614e946000830184614905565b92915050565b6000606082019050614eaf6000830186614905565b614ebc6020830185614905565b614ec96040830184614dcc565b949350505050565b6000604082019050614ee66000830185614905565b614ef36020830184614dcc565b9392505050565b6000604082019050614f0f6000830185614932565b614f1c6020830184614932565b9392505050565b6000606082019050614f386000830186614932565b614f456020830185614905565b614f526040830184614dcc565b949350505050565b6000606082019050614f6f6000830187614932565b8181036020830152614f82818587614c5f565b9050614f916040830184614dcc565b95945050505050565b6000604082019050614faf6000830185614932565b614fbc6020830184614dcc565b9392505050565b60006040820190508181036000830152614fde818688614941565b90508181036020830152614ff3818486614a5a565b905095945050505050565b60006020820190506150136000830184614b7d565b92915050565b60006101608201905061502f600083018e614b7d565b61503c602083018d614b9b565b615049604083018c614dcc565b818103606083015261505b818b6149fc565b9050818103608083015261506f818a61499e565b905061507e60a0830189614b9b565b61508b60c0830188614b9b565b81810360e083015261509d8187614ab2565b90508181036101008301526150b28186614b10565b90508181036101208301526150c781856149fc565b90508181036101408301526150dc81846149fc565b90509c9b505050505050505050505050565b60006020820190506151036000830184614b9b565b92915050565b600060808201905061511e6000830187614b9b565b61512b6020830186614e01565b6151386040830185614b9b565b6151456060830184614b9b565b95945050505050565b60006020820190506151636000830184614c41565b92915050565b600060208201905081810360008301526151838184614c8c565b905092915050565b600060c0820190506151a06000830184614cdf565b92915050565b600060808201905081810360008301526151c08188614d5a565b90506151cf6020830187614932565b6151dc6040830186614932565b81810360608301526151ef818486614baa565b90509695505050505050565b600060408201905081810360008301526152158186614d5a565b9050818103602083015261522a818486614c5f565b9050949350505050565b60006020820190506152496000830184614dcc565b92915050565b60006020820190506152646000830184614e01565b92915050565b6000604051905081810181811067ffffffffffffffff8211171561528d57600080fd5b8060405250919050565b600067ffffffffffffffff8211156152ae57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156152d657600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156152fe57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561532657600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561534e57600080fd5b601f19601f8301169050602081019050919050565b6000819050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b60006154d26020840184613e44565b905092915050565b60006154e582615527565b9050919050565b60006154f782615527565b9050919050565b60008115159050919050565b6000819050919050565b600081905061552282615627565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000615569826155a6565b9050919050565b600061557b82615582565b9050919050565b600061558d82615527565b9050919050565b600061559f82615514565b9050919050565b60006155b1826155b8565b9050919050565b60006155c382615527565b9050919050565b82818337600083830152505050565b60005b838110156155f75780820151818401526020810190506155dc565b83811115615606576000848401525b50505050565b6000819050919050565b6000601f19601f8301169050919050565b6006811061563157fe5b50565b61563d816154da565b811461564857600080fd5b50565b615654816154ec565b811461565f57600080fd5b50565b61566b816154fe565b811461567657600080fd5b50565b6156828161550a565b811461568d57600080fd5b50565b61569981615547565b81146156a457600080fd5b50565b6156b081615551565b81146156bb57600080fd5b5056fea2646970667358221220f5a9fb3a6adfae6eb9e6a50fa027536a77b9190d102fc620a0890d73d7f9126c64736f6c634300060c0033",
}

// VaultplgABI is the input ABI used to generate the binding from.
// Deprecated: Use VaultplgMetaData.ABI instead.
var VaultplgABI = VaultplgMetaData.ABI

// VaultplgBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use VaultplgMetaData.Bin instead.
var VaultplgBin = VaultplgMetaData.Bin

// DeployVaultplg deploys a new Ethereum contract, binding an instance of Vaultplg to it.
func DeployVaultplg(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Vaultplg, error) {
	parsed, err := VaultplgMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(VaultplgBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Vaultplg{VaultplgCaller: VaultplgCaller{contract: contract}, VaultplgTransactor: VaultplgTransactor{contract: contract}, VaultplgFilterer: VaultplgFilterer{contract: contract}}, nil
}

// Vaultplg is an auto generated Go binding around an Ethereum contract.
type Vaultplg struct {
	VaultplgCaller     // Read-only binding to the contract
	VaultplgTransactor // Write-only binding to the contract
	VaultplgFilterer   // Log filterer for contract events
}

// VaultplgCaller is an auto generated read-only Go binding around an Ethereum contract.
type VaultplgCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VaultplgTransactor is an auto generated write-only Go binding around an Ethereum contract.
type VaultplgTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VaultplgFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type VaultplgFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VaultplgSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type VaultplgSession struct {
	Contract     *Vaultplg         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// VaultplgCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type VaultplgCallerSession struct {
	Contract *VaultplgCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// VaultplgTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type VaultplgTransactorSession struct {
	Contract     *VaultplgTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// VaultplgRaw is an auto generated low-level Go binding around an Ethereum contract.
type VaultplgRaw struct {
	Contract *Vaultplg // Generic contract binding to access the raw methods on
}

// VaultplgCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type VaultplgCallerRaw struct {
	Contract *VaultplgCaller // Generic read-only contract binding to access the raw methods on
}

// VaultplgTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type VaultplgTransactorRaw struct {
	Contract *VaultplgTransactor // Generic write-only contract binding to access the raw methods on
}

// NewVaultplg creates a new instance of Vaultplg, bound to a specific deployed contract.
func NewVaultplg(address common.Address, backend bind.ContractBackend) (*Vaultplg, error) {
	contract, err := bindVaultplg(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Vaultplg{VaultplgCaller: VaultplgCaller{contract: contract}, VaultplgTransactor: VaultplgTransactor{contract: contract}, VaultplgFilterer: VaultplgFilterer{contract: contract}}, nil
}

// NewVaultplgCaller creates a new read-only instance of Vaultplg, bound to a specific deployed contract.
func NewVaultplgCaller(address common.Address, caller bind.ContractCaller) (*VaultplgCaller, error) {
	contract, err := bindVaultplg(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &VaultplgCaller{contract: contract}, nil
}

// NewVaultplgTransactor creates a new write-only instance of Vaultplg, bound to a specific deployed contract.
func NewVaultplgTransactor(address common.Address, transactor bind.ContractTransactor) (*VaultplgTransactor, error) {
	contract, err := bindVaultplg(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &VaultplgTransactor{contract: contract}, nil
}

// NewVaultplgFilterer creates a new log filterer instance of Vaultplg, bound to a specific deployed contract.
func NewVaultplgFilterer(address common.Address, filterer bind.ContractFilterer) (*VaultplgFilterer, error) {
	contract, err := bindVaultplg(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &VaultplgFilterer{contract: contract}, nil
}

// bindVaultplg binds a generic wrapper to an already deployed contract.
func bindVaultplg(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(VaultplgABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Vaultplg *VaultplgRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Vaultplg.Contract.VaultplgCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Vaultplg *VaultplgRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Vaultplg.Contract.VaultplgTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Vaultplg *VaultplgRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Vaultplg.Contract.VaultplgTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Vaultplg *VaultplgCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Vaultplg.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Vaultplg *VaultplgTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Vaultplg.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Vaultplg *VaultplgTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Vaultplg.Contract.contract.Transact(opts, method, params...)
}

// ETHTOKEN is a free data retrieval call binding the contract method 0x58bc8337.
//
// Solidity: function ETH_TOKEN() view returns(address)
func (_Vaultplg *VaultplgCaller) ETHTOKEN(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Vaultplg.contract.Call(opts, &out, "ETH_TOKEN")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ETHTOKEN is a free data retrieval call binding the contract method 0x58bc8337.
//
// Solidity: function ETH_TOKEN() view returns(address)
func (_Vaultplg *VaultplgSession) ETHTOKEN() (common.Address, error) {
	return _Vaultplg.Contract.ETHTOKEN(&_Vaultplg.CallOpts)
}

// ETHTOKEN is a free data retrieval call binding the contract method 0x58bc8337.
//
// Solidity: function ETH_TOKEN() view returns(address)
func (_Vaultplg *VaultplgCallerSession) ETHTOKEN() (common.Address, error) {
	return _Vaultplg.Contract.ETHTOKEN(&_Vaultplg.CallOpts)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address token) view returns(uint256)
func (_Vaultplg *VaultplgCaller) BalanceOf(opts *bind.CallOpts, token common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Vaultplg.contract.Call(opts, &out, "balanceOf", token)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address token) view returns(uint256)
func (_Vaultplg *VaultplgSession) BalanceOf(token common.Address) (*big.Int, error) {
	return _Vaultplg.Contract.BalanceOf(&_Vaultplg.CallOpts, token)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address token) view returns(uint256)
func (_Vaultplg *VaultplgCallerSession) BalanceOf(token common.Address) (*big.Int, error) {
	return _Vaultplg.Contract.BalanceOf(&_Vaultplg.CallOpts, token)
}

// GetDecimals is a free data retrieval call binding the contract method 0xcf54aaa0.
//
// Solidity: function getDecimals(address token) view returns(uint8)
func (_Vaultplg *VaultplgCaller) GetDecimals(opts *bind.CallOpts, token common.Address) (uint8, error) {
	var out []interface{}
	err := _Vaultplg.contract.Call(opts, &out, "getDecimals", token)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetDecimals is a free data retrieval call binding the contract method 0xcf54aaa0.
//
// Solidity: function getDecimals(address token) view returns(uint8)
func (_Vaultplg *VaultplgSession) GetDecimals(token common.Address) (uint8, error) {
	return _Vaultplg.Contract.GetDecimals(&_Vaultplg.CallOpts, token)
}

// GetDecimals is a free data retrieval call binding the contract method 0xcf54aaa0.
//
// Solidity: function getDecimals(address token) view returns(uint8)
func (_Vaultplg *VaultplgCallerSession) GetDecimals(token common.Address) (uint8, error) {
	return _Vaultplg.Contract.GetDecimals(&_Vaultplg.CallOpts, token)
}

// GetDepositedBalance is a free data retrieval call binding the contract method 0xf75b98ce.
//
// Solidity: function getDepositedBalance(address token, address owner) view returns(uint256)
func (_Vaultplg *VaultplgCaller) GetDepositedBalance(opts *bind.CallOpts, token common.Address, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Vaultplg.contract.Call(opts, &out, "getDepositedBalance", token, owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetDepositedBalance is a free data retrieval call binding the contract method 0xf75b98ce.
//
// Solidity: function getDepositedBalance(address token, address owner) view returns(uint256)
func (_Vaultplg *VaultplgSession) GetDepositedBalance(token common.Address, owner common.Address) (*big.Int, error) {
	return _Vaultplg.Contract.GetDepositedBalance(&_Vaultplg.CallOpts, token, owner)
}

// GetDepositedBalance is a free data retrieval call binding the contract method 0xf75b98ce.
//
// Solidity: function getDepositedBalance(address token, address owner) view returns(uint256)
func (_Vaultplg *VaultplgCallerSession) GetDepositedBalance(token common.Address, owner common.Address) (*big.Int, error) {
	return _Vaultplg.Contract.GetDepositedBalance(&_Vaultplg.CallOpts, token, owner)
}

// IsInitialized is a free data retrieval call binding the contract method 0x392e53cd.
//
// Solidity: function isInitialized() view returns(bool)
func (_Vaultplg *VaultplgCaller) IsInitialized(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Vaultplg.contract.Call(opts, &out, "isInitialized")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsInitialized is a free data retrieval call binding the contract method 0x392e53cd.
//
// Solidity: function isInitialized() view returns(bool)
func (_Vaultplg *VaultplgSession) IsInitialized() (bool, error) {
	return _Vaultplg.Contract.IsInitialized(&_Vaultplg.CallOpts)
}

// IsInitialized is a free data retrieval call binding the contract method 0x392e53cd.
//
// Solidity: function isInitialized() view returns(bool)
func (_Vaultplg *VaultplgCallerSession) IsInitialized() (bool, error) {
	return _Vaultplg.Contract.IsInitialized(&_Vaultplg.CallOpts)
}

// IsSigDataUsed is a free data retrieval call binding the contract method 0xe4bd7074.
//
// Solidity: function isSigDataUsed(bytes32 hash) view returns(bool)
func (_Vaultplg *VaultplgCaller) IsSigDataUsed(opts *bind.CallOpts, hash [32]byte) (bool, error) {
	var out []interface{}
	err := _Vaultplg.contract.Call(opts, &out, "isSigDataUsed", hash)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsSigDataUsed is a free data retrieval call binding the contract method 0xe4bd7074.
//
// Solidity: function isSigDataUsed(bytes32 hash) view returns(bool)
func (_Vaultplg *VaultplgSession) IsSigDataUsed(hash [32]byte) (bool, error) {
	return _Vaultplg.Contract.IsSigDataUsed(&_Vaultplg.CallOpts, hash)
}

// IsSigDataUsed is a free data retrieval call binding the contract method 0xe4bd7074.
//
// Solidity: function isSigDataUsed(bytes32 hash) view returns(bool)
func (_Vaultplg *VaultplgCallerSession) IsSigDataUsed(hash [32]byte) (bool, error) {
	return _Vaultplg.Contract.IsSigDataUsed(&_Vaultplg.CallOpts, hash)
}

// IsWithdrawed is a free data retrieval call binding the contract method 0x749c5f86.
//
// Solidity: function isWithdrawed(bytes32 hash) view returns(bool)
func (_Vaultplg *VaultplgCaller) IsWithdrawed(opts *bind.CallOpts, hash [32]byte) (bool, error) {
	var out []interface{}
	err := _Vaultplg.contract.Call(opts, &out, "isWithdrawed", hash)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsWithdrawed is a free data retrieval call binding the contract method 0x749c5f86.
//
// Solidity: function isWithdrawed(bytes32 hash) view returns(bool)
func (_Vaultplg *VaultplgSession) IsWithdrawed(hash [32]byte) (bool, error) {
	return _Vaultplg.Contract.IsWithdrawed(&_Vaultplg.CallOpts, hash)
}

// IsWithdrawed is a free data retrieval call binding the contract method 0x749c5f86.
//
// Solidity: function isWithdrawed(bytes32 hash) view returns(bool)
func (_Vaultplg *VaultplgCallerSession) IsWithdrawed(hash [32]byte) (bool, error) {
	return _Vaultplg.Contract.IsWithdrawed(&_Vaultplg.CallOpts, hash)
}

// Migration is a free data retrieval call binding the contract method 0x995fac11.
//
// Solidity: function migration(address , address ) view returns(bool)
func (_Vaultplg *VaultplgCaller) Migration(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address) (bool, error) {
	var out []interface{}
	err := _Vaultplg.contract.Call(opts, &out, "migration", arg0, arg1)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Migration is a free data retrieval call binding the contract method 0x995fac11.
//
// Solidity: function migration(address , address ) view returns(bool)
func (_Vaultplg *VaultplgSession) Migration(arg0 common.Address, arg1 common.Address) (bool, error) {
	return _Vaultplg.Contract.Migration(&_Vaultplg.CallOpts, arg0, arg1)
}

// Migration is a free data retrieval call binding the contract method 0x995fac11.
//
// Solidity: function migration(address , address ) view returns(bool)
func (_Vaultplg *VaultplgCallerSession) Migration(arg0 common.Address, arg1 common.Address) (bool, error) {
	return _Vaultplg.Contract.Migration(&_Vaultplg.CallOpts, arg0, arg1)
}

// NotEntered is a free data retrieval call binding the contract method 0xa3f5d8cc.
//
// Solidity: function notEntered() view returns(bool)
func (_Vaultplg *VaultplgCaller) NotEntered(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Vaultplg.contract.Call(opts, &out, "notEntered")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// NotEntered is a free data retrieval call binding the contract method 0xa3f5d8cc.
//
// Solidity: function notEntered() view returns(bool)
func (_Vaultplg *VaultplgSession) NotEntered() (bool, error) {
	return _Vaultplg.Contract.NotEntered(&_Vaultplg.CallOpts)
}

// NotEntered is a free data retrieval call binding the contract method 0xa3f5d8cc.
//
// Solidity: function notEntered() view returns(bool)
func (_Vaultplg *VaultplgCallerSession) NotEntered() (bool, error) {
	return _Vaultplg.Contract.NotEntered(&_Vaultplg.CallOpts)
}

// ParseBurnInst is a free data retrieval call binding the contract method 0x7e16e6e1.
//
// Solidity: function parseBurnInst(bytes inst) pure returns((uint8,uint8,address,address,uint256,bytes32))
func (_Vaultplg *VaultplgCaller) ParseBurnInst(opts *bind.CallOpts, inst []byte) (VaultBurnInstData, error) {
	var out []interface{}
	err := _Vaultplg.contract.Call(opts, &out, "parseBurnInst", inst)

	if err != nil {
		return *new(VaultBurnInstData), err
	}

	out0 := *abi.ConvertType(out[0], new(VaultBurnInstData)).(*VaultBurnInstData)

	return out0, err

}

// ParseBurnInst is a free data retrieval call binding the contract method 0x7e16e6e1.
//
// Solidity: function parseBurnInst(bytes inst) pure returns((uint8,uint8,address,address,uint256,bytes32))
func (_Vaultplg *VaultplgSession) ParseBurnInst(inst []byte) (VaultBurnInstData, error) {
	return _Vaultplg.Contract.ParseBurnInst(&_Vaultplg.CallOpts, inst)
}

// ParseBurnInst is a free data retrieval call binding the contract method 0x7e16e6e1.
//
// Solidity: function parseBurnInst(bytes inst) pure returns((uint8,uint8,address,address,uint256,bytes32))
func (_Vaultplg *VaultplgCallerSession) ParseBurnInst(inst []byte) (VaultBurnInstData, error) {
	return _Vaultplg.Contract.ParseBurnInst(&_Vaultplg.CallOpts, inst)
}

// PrevVault is a free data retrieval call binding the contract method 0xfa84702e.
//
// Solidity: function prevVault() view returns(address)
func (_Vaultplg *VaultplgCaller) PrevVault(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Vaultplg.contract.Call(opts, &out, "prevVault")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PrevVault is a free data retrieval call binding the contract method 0xfa84702e.
//
// Solidity: function prevVault() view returns(address)
func (_Vaultplg *VaultplgSession) PrevVault() (common.Address, error) {
	return _Vaultplg.Contract.PrevVault(&_Vaultplg.CallOpts)
}

// PrevVault is a free data retrieval call binding the contract method 0xfa84702e.
//
// Solidity: function prevVault() view returns(address)
func (_Vaultplg *VaultplgCallerSession) PrevVault() (common.Address, error) {
	return _Vaultplg.Contract.PrevVault(&_Vaultplg.CallOpts)
}

// SigDataUsed is a free data retrieval call binding the contract method 0x1ea1940e.
//
// Solidity: function sigDataUsed(bytes32 ) view returns(bool)
func (_Vaultplg *VaultplgCaller) SigDataUsed(opts *bind.CallOpts, arg0 [32]byte) (bool, error) {
	var out []interface{}
	err := _Vaultplg.contract.Call(opts, &out, "sigDataUsed", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SigDataUsed is a free data retrieval call binding the contract method 0x1ea1940e.
//
// Solidity: function sigDataUsed(bytes32 ) view returns(bool)
func (_Vaultplg *VaultplgSession) SigDataUsed(arg0 [32]byte) (bool, error) {
	return _Vaultplg.Contract.SigDataUsed(&_Vaultplg.CallOpts, arg0)
}

// SigDataUsed is a free data retrieval call binding the contract method 0x1ea1940e.
//
// Solidity: function sigDataUsed(bytes32 ) view returns(bool)
func (_Vaultplg *VaultplgCallerSession) SigDataUsed(arg0 [32]byte) (bool, error) {
	return _Vaultplg.Contract.SigDataUsed(&_Vaultplg.CallOpts, arg0)
}

// SigToAddress is a free data retrieval call binding the contract method 0x3fec6b40.
//
// Solidity: function sigToAddress(bytes signData, bytes32 hash) pure returns(address)
func (_Vaultplg *VaultplgCaller) SigToAddress(opts *bind.CallOpts, signData []byte, hash [32]byte) (common.Address, error) {
	var out []interface{}
	err := _Vaultplg.contract.Call(opts, &out, "sigToAddress", signData, hash)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SigToAddress is a free data retrieval call binding the contract method 0x3fec6b40.
//
// Solidity: function sigToAddress(bytes signData, bytes32 hash) pure returns(address)
func (_Vaultplg *VaultplgSession) SigToAddress(signData []byte, hash [32]byte) (common.Address, error) {
	return _Vaultplg.Contract.SigToAddress(&_Vaultplg.CallOpts, signData, hash)
}

// SigToAddress is a free data retrieval call binding the contract method 0x3fec6b40.
//
// Solidity: function sigToAddress(bytes signData, bytes32 hash) pure returns(address)
func (_Vaultplg *VaultplgCallerSession) SigToAddress(signData []byte, hash [32]byte) (common.Address, error) {
	return _Vaultplg.Contract.SigToAddress(&_Vaultplg.CallOpts, signData, hash)
}

// TotalDepositedToSCAmount is a free data retrieval call binding the contract method 0x6304541c.
//
// Solidity: function totalDepositedToSCAmount(address ) view returns(uint256)
func (_Vaultplg *VaultplgCaller) TotalDepositedToSCAmount(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Vaultplg.contract.Call(opts, &out, "totalDepositedToSCAmount", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalDepositedToSCAmount is a free data retrieval call binding the contract method 0x6304541c.
//
// Solidity: function totalDepositedToSCAmount(address ) view returns(uint256)
func (_Vaultplg *VaultplgSession) TotalDepositedToSCAmount(arg0 common.Address) (*big.Int, error) {
	return _Vaultplg.Contract.TotalDepositedToSCAmount(&_Vaultplg.CallOpts, arg0)
}

// TotalDepositedToSCAmount is a free data retrieval call binding the contract method 0x6304541c.
//
// Solidity: function totalDepositedToSCAmount(address ) view returns(uint256)
func (_Vaultplg *VaultplgCallerSession) TotalDepositedToSCAmount(arg0 common.Address) (*big.Int, error) {
	return _Vaultplg.Contract.TotalDepositedToSCAmount(&_Vaultplg.CallOpts, arg0)
}

// WithdrawRequests is a free data retrieval call binding the contract method 0x65b5a00f.
//
// Solidity: function withdrawRequests(address , address ) view returns(uint256)
func (_Vaultplg *VaultplgCaller) WithdrawRequests(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Vaultplg.contract.Call(opts, &out, "withdrawRequests", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WithdrawRequests is a free data retrieval call binding the contract method 0x65b5a00f.
//
// Solidity: function withdrawRequests(address , address ) view returns(uint256)
func (_Vaultplg *VaultplgSession) WithdrawRequests(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _Vaultplg.Contract.WithdrawRequests(&_Vaultplg.CallOpts, arg0, arg1)
}

// WithdrawRequests is a free data retrieval call binding the contract method 0x65b5a00f.
//
// Solidity: function withdrawRequests(address , address ) view returns(uint256)
func (_Vaultplg *VaultplgCallerSession) WithdrawRequests(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _Vaultplg.Contract.WithdrawRequests(&_Vaultplg.CallOpts, arg0, arg1)
}

// Withdrawed is a free data retrieval call binding the contract method 0xdca40d9e.
//
// Solidity: function withdrawed(bytes32 ) view returns(bool)
func (_Vaultplg *VaultplgCaller) Withdrawed(opts *bind.CallOpts, arg0 [32]byte) (bool, error) {
	var out []interface{}
	err := _Vaultplg.contract.Call(opts, &out, "withdrawed", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Withdrawed is a free data retrieval call binding the contract method 0xdca40d9e.
//
// Solidity: function withdrawed(bytes32 ) view returns(bool)
func (_Vaultplg *VaultplgSession) Withdrawed(arg0 [32]byte) (bool, error) {
	return _Vaultplg.Contract.Withdrawed(&_Vaultplg.CallOpts, arg0)
}

// Withdrawed is a free data retrieval call binding the contract method 0xdca40d9e.
//
// Solidity: function withdrawed(bytes32 ) view returns(bool)
func (_Vaultplg *VaultplgCallerSession) Withdrawed(arg0 [32]byte) (bool, error) {
	return _Vaultplg.Contract.Withdrawed(&_Vaultplg.CallOpts, arg0)
}

// Deposit is a paid mutator transaction binding the contract method 0xa26e1186.
//
// Solidity: function deposit(string incognitoAddress) payable returns()
func (_Vaultplg *VaultplgTransactor) Deposit(opts *bind.TransactOpts, incognitoAddress string) (*types.Transaction, error) {
	return _Vaultplg.contract.Transact(opts, "deposit", incognitoAddress)
}

// Deposit is a paid mutator transaction binding the contract method 0xa26e1186.
//
// Solidity: function deposit(string incognitoAddress) payable returns()
func (_Vaultplg *VaultplgSession) Deposit(incognitoAddress string) (*types.Transaction, error) {
	return _Vaultplg.Contract.Deposit(&_Vaultplg.TransactOpts, incognitoAddress)
}

// Deposit is a paid mutator transaction binding the contract method 0xa26e1186.
//
// Solidity: function deposit(string incognitoAddress) payable returns()
func (_Vaultplg *VaultplgTransactorSession) Deposit(incognitoAddress string) (*types.Transaction, error) {
	return _Vaultplg.Contract.Deposit(&_Vaultplg.TransactOpts, incognitoAddress)
}

// DepositERC20 is a paid mutator transaction binding the contract method 0x5a67cb87.
//
// Solidity: function depositERC20(address token, uint256 amount, string incognitoAddress) returns()
func (_Vaultplg *VaultplgTransactor) DepositERC20(opts *bind.TransactOpts, token common.Address, amount *big.Int, incognitoAddress string) (*types.Transaction, error) {
	return _Vaultplg.contract.Transact(opts, "depositERC20", token, amount, incognitoAddress)
}

// DepositERC20 is a paid mutator transaction binding the contract method 0x5a67cb87.
//
// Solidity: function depositERC20(address token, uint256 amount, string incognitoAddress) returns()
func (_Vaultplg *VaultplgSession) DepositERC20(token common.Address, amount *big.Int, incognitoAddress string) (*types.Transaction, error) {
	return _Vaultplg.Contract.DepositERC20(&_Vaultplg.TransactOpts, token, amount, incognitoAddress)
}

// DepositERC20 is a paid mutator transaction binding the contract method 0x5a67cb87.
//
// Solidity: function depositERC20(address token, uint256 amount, string incognitoAddress) returns()
func (_Vaultplg *VaultplgTransactorSession) DepositERC20(token common.Address, amount *big.Int, incognitoAddress string) (*types.Transaction, error) {
	return _Vaultplg.Contract.DepositERC20(&_Vaultplg.TransactOpts, token, amount, incognitoAddress)
}

// Execute is a paid mutator transaction binding the contract method 0x8588ccd6.
//
// Solidity: function execute(address token, uint256 amount, address recipientToken, address exchangeAddress, bytes callData, bytes timestamp, bytes signData) payable returns()
func (_Vaultplg *VaultplgTransactor) Execute(opts *bind.TransactOpts, token common.Address, amount *big.Int, recipientToken common.Address, exchangeAddress common.Address, callData []byte, timestamp []byte, signData []byte) (*types.Transaction, error) {
	return _Vaultplg.contract.Transact(opts, "execute", token, amount, recipientToken, exchangeAddress, callData, timestamp, signData)
}

// Execute is a paid mutator transaction binding the contract method 0x8588ccd6.
//
// Solidity: function execute(address token, uint256 amount, address recipientToken, address exchangeAddress, bytes callData, bytes timestamp, bytes signData) payable returns()
func (_Vaultplg *VaultplgSession) Execute(token common.Address, amount *big.Int, recipientToken common.Address, exchangeAddress common.Address, callData []byte, timestamp []byte, signData []byte) (*types.Transaction, error) {
	return _Vaultplg.Contract.Execute(&_Vaultplg.TransactOpts, token, amount, recipientToken, exchangeAddress, callData, timestamp, signData)
}

// Execute is a paid mutator transaction binding the contract method 0x8588ccd6.
//
// Solidity: function execute(address token, uint256 amount, address recipientToken, address exchangeAddress, bytes callData, bytes timestamp, bytes signData) payable returns()
func (_Vaultplg *VaultplgTransactorSession) Execute(token common.Address, amount *big.Int, recipientToken common.Address, exchangeAddress common.Address, callData []byte, timestamp []byte, signData []byte) (*types.Transaction, error) {
	return _Vaultplg.Contract.Execute(&_Vaultplg.TransactOpts, token, amount, recipientToken, exchangeAddress, callData, timestamp, signData)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _prevVault) returns()
func (_Vaultplg *VaultplgTransactor) Initialize(opts *bind.TransactOpts, _prevVault common.Address) (*types.Transaction, error) {
	return _Vaultplg.contract.Transact(opts, "initialize", _prevVault)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _prevVault) returns()
func (_Vaultplg *VaultplgSession) Initialize(_prevVault common.Address) (*types.Transaction, error) {
	return _Vaultplg.Contract.Initialize(&_Vaultplg.TransactOpts, _prevVault)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _prevVault) returns()
func (_Vaultplg *VaultplgTransactorSession) Initialize(_prevVault common.Address) (*types.Transaction, error) {
	return _Vaultplg.Contract.Initialize(&_Vaultplg.TransactOpts, _prevVault)
}

// RequestWithdraw is a paid mutator transaction binding the contract method 0x87add440.
//
// Solidity: function requestWithdraw(string incognitoAddress, address token, uint256 amount, bytes signData, bytes timestamp) returns()
func (_Vaultplg *VaultplgTransactor) RequestWithdraw(opts *bind.TransactOpts, incognitoAddress string, token common.Address, amount *big.Int, signData []byte, timestamp []byte) (*types.Transaction, error) {
	return _Vaultplg.contract.Transact(opts, "requestWithdraw", incognitoAddress, token, amount, signData, timestamp)
}

// RequestWithdraw is a paid mutator transaction binding the contract method 0x87add440.
//
// Solidity: function requestWithdraw(string incognitoAddress, address token, uint256 amount, bytes signData, bytes timestamp) returns()
func (_Vaultplg *VaultplgSession) RequestWithdraw(incognitoAddress string, token common.Address, amount *big.Int, signData []byte, timestamp []byte) (*types.Transaction, error) {
	return _Vaultplg.Contract.RequestWithdraw(&_Vaultplg.TransactOpts, incognitoAddress, token, amount, signData, timestamp)
}

// RequestWithdraw is a paid mutator transaction binding the contract method 0x87add440.
//
// Solidity: function requestWithdraw(string incognitoAddress, address token, uint256 amount, bytes signData, bytes timestamp) returns()
func (_Vaultplg *VaultplgTransactorSession) RequestWithdraw(incognitoAddress string, token common.Address, amount *big.Int, signData []byte, timestamp []byte) (*types.Transaction, error) {
	return _Vaultplg.Contract.RequestWithdraw(&_Vaultplg.TransactOpts, incognitoAddress, token, amount, signData, timestamp)
}

// SubmitBurnProof is a paid mutator transaction binding the contract method 0x73bf9651.
//
// Solidity: function submitBurnProof(bytes inst, uint256 heights, bytes32[] instPaths, bool[] instPathIsLefts, bytes32 instRoots, bytes32 blkData, uint256[] sigIdxs, uint8[] sigVs, bytes32[] sigRs, bytes32[] sigSs) returns()
func (_Vaultplg *VaultplgTransactor) SubmitBurnProof(opts *bind.TransactOpts, inst []byte, heights *big.Int, instPaths [][32]byte, instPathIsLefts []bool, instRoots [32]byte, blkData [32]byte, sigIdxs []*big.Int, sigVs []uint8, sigRs [][32]byte, sigSs [][32]byte) (*types.Transaction, error) {
	return _Vaultplg.contract.Transact(opts, "submitBurnProof", inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// SubmitBurnProof is a paid mutator transaction binding the contract method 0x73bf9651.
//
// Solidity: function submitBurnProof(bytes inst, uint256 heights, bytes32[] instPaths, bool[] instPathIsLefts, bytes32 instRoots, bytes32 blkData, uint256[] sigIdxs, uint8[] sigVs, bytes32[] sigRs, bytes32[] sigSs) returns()
func (_Vaultplg *VaultplgSession) SubmitBurnProof(inst []byte, heights *big.Int, instPaths [][32]byte, instPathIsLefts []bool, instRoots [32]byte, blkData [32]byte, sigIdxs []*big.Int, sigVs []uint8, sigRs [][32]byte, sigSs [][32]byte) (*types.Transaction, error) {
	return _Vaultplg.Contract.SubmitBurnProof(&_Vaultplg.TransactOpts, inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// SubmitBurnProof is a paid mutator transaction binding the contract method 0x73bf9651.
//
// Solidity: function submitBurnProof(bytes inst, uint256 heights, bytes32[] instPaths, bool[] instPathIsLefts, bytes32 instRoots, bytes32 blkData, uint256[] sigIdxs, uint8[] sigVs, bytes32[] sigRs, bytes32[] sigSs) returns()
func (_Vaultplg *VaultplgTransactorSession) SubmitBurnProof(inst []byte, heights *big.Int, instPaths [][32]byte, instPathIsLefts []bool, instRoots [32]byte, blkData [32]byte, sigIdxs []*big.Int, sigVs []uint8, sigRs [][32]byte, sigSs [][32]byte) (*types.Transaction, error) {
	return _Vaultplg.Contract.SubmitBurnProof(&_Vaultplg.TransactOpts, inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// UpdateAssets is a paid mutator transaction binding the contract method 0x1ed4276d.
//
// Solidity: function updateAssets(address[] assets, uint256[] amounts) returns(bool)
func (_Vaultplg *VaultplgTransactor) UpdateAssets(opts *bind.TransactOpts, assets []common.Address, amounts []*big.Int) (*types.Transaction, error) {
	return _Vaultplg.contract.Transact(opts, "updateAssets", assets, amounts)
}

// UpdateAssets is a paid mutator transaction binding the contract method 0x1ed4276d.
//
// Solidity: function updateAssets(address[] assets, uint256[] amounts) returns(bool)
func (_Vaultplg *VaultplgSession) UpdateAssets(assets []common.Address, amounts []*big.Int) (*types.Transaction, error) {
	return _Vaultplg.Contract.UpdateAssets(&_Vaultplg.TransactOpts, assets, amounts)
}

// UpdateAssets is a paid mutator transaction binding the contract method 0x1ed4276d.
//
// Solidity: function updateAssets(address[] assets, uint256[] amounts) returns(bool)
func (_Vaultplg *VaultplgTransactorSession) UpdateAssets(assets []common.Address, amounts []*big.Int) (*types.Transaction, error) {
	return _Vaultplg.Contract.UpdateAssets(&_Vaultplg.TransactOpts, assets, amounts)
}

// Withdraw is a paid mutator transaction binding the contract method 0x1beb7de2.
//
// Solidity: function withdraw(bytes inst, uint256 heights, bytes32[] instPaths, bool[] instPathIsLefts, bytes32 instRoots, bytes32 blkData, uint256[] sigIdxs, uint8[] sigVs, bytes32[] sigRs, bytes32[] sigSs) returns()
func (_Vaultplg *VaultplgTransactor) Withdraw(opts *bind.TransactOpts, inst []byte, heights *big.Int, instPaths [][32]byte, instPathIsLefts []bool, instRoots [32]byte, blkData [32]byte, sigIdxs []*big.Int, sigVs []uint8, sigRs [][32]byte, sigSs [][32]byte) (*types.Transaction, error) {
	return _Vaultplg.contract.Transact(opts, "withdraw", inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// Withdraw is a paid mutator transaction binding the contract method 0x1beb7de2.
//
// Solidity: function withdraw(bytes inst, uint256 heights, bytes32[] instPaths, bool[] instPathIsLefts, bytes32 instRoots, bytes32 blkData, uint256[] sigIdxs, uint8[] sigVs, bytes32[] sigRs, bytes32[] sigSs) returns()
func (_Vaultplg *VaultplgSession) Withdraw(inst []byte, heights *big.Int, instPaths [][32]byte, instPathIsLefts []bool, instRoots [32]byte, blkData [32]byte, sigIdxs []*big.Int, sigVs []uint8, sigRs [][32]byte, sigSs [][32]byte) (*types.Transaction, error) {
	return _Vaultplg.Contract.Withdraw(&_Vaultplg.TransactOpts, inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// Withdraw is a paid mutator transaction binding the contract method 0x1beb7de2.
//
// Solidity: function withdraw(bytes inst, uint256 heights, bytes32[] instPaths, bool[] instPathIsLefts, bytes32 instRoots, bytes32 blkData, uint256[] sigIdxs, uint8[] sigVs, bytes32[] sigRs, bytes32[] sigSs) returns()
func (_Vaultplg *VaultplgTransactorSession) Withdraw(inst []byte, heights *big.Int, instPaths [][32]byte, instPathIsLefts []bool, instRoots [32]byte, blkData [32]byte, sigIdxs []*big.Int, sigVs []uint8, sigRs [][32]byte, sigSs [][32]byte) (*types.Transaction, error) {
	return _Vaultplg.Contract.Withdraw(&_Vaultplg.TransactOpts, inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Vaultplg *VaultplgTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Vaultplg.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Vaultplg *VaultplgSession) Receive() (*types.Transaction, error) {
	return _Vaultplg.Contract.Receive(&_Vaultplg.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Vaultplg *VaultplgTransactorSession) Receive() (*types.Transaction, error) {
	return _Vaultplg.Contract.Receive(&_Vaultplg.TransactOpts)
}

// VaultplgDepositIterator is returned from FilterDeposit and is used to iterate over the raw logs and unpacked data for Deposit events raised by the Vaultplg contract.
type VaultplgDepositIterator struct {
	Event *VaultplgDeposit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VaultplgDepositIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VaultplgDeposit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VaultplgDeposit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VaultplgDepositIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VaultplgDepositIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VaultplgDeposit represents a Deposit event raised by the Vaultplg contract.
type VaultplgDeposit struct {
	Token            common.Address
	IncognitoAddress string
	Amount           *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterDeposit is a free log retrieval operation binding the contract event 0x2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e.
//
// Solidity: event Deposit(address token, string incognitoAddress, uint256 amount)
func (_Vaultplg *VaultplgFilterer) FilterDeposit(opts *bind.FilterOpts) (*VaultplgDepositIterator, error) {

	logs, sub, err := _Vaultplg.contract.FilterLogs(opts, "Deposit")
	if err != nil {
		return nil, err
	}
	return &VaultplgDepositIterator{contract: _Vaultplg.contract, event: "Deposit", logs: logs, sub: sub}, nil
}

// WatchDeposit is a free log subscription operation binding the contract event 0x2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e.
//
// Solidity: event Deposit(address token, string incognitoAddress, uint256 amount)
func (_Vaultplg *VaultplgFilterer) WatchDeposit(opts *bind.WatchOpts, sink chan<- *VaultplgDeposit) (event.Subscription, error) {

	logs, sub, err := _Vaultplg.contract.WatchLogs(opts, "Deposit")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VaultplgDeposit)
				if err := _Vaultplg.contract.UnpackLog(event, "Deposit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeposit is a log parse operation binding the contract event 0x2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e.
//
// Solidity: event Deposit(address token, string incognitoAddress, uint256 amount)
func (_Vaultplg *VaultplgFilterer) ParseDeposit(log types.Log) (*VaultplgDeposit, error) {
	event := new(VaultplgDeposit)
	if err := _Vaultplg.contract.UnpackLog(event, "Deposit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// VaultplgUpdateIncognitoProxyIterator is returned from FilterUpdateIncognitoProxy and is used to iterate over the raw logs and unpacked data for UpdateIncognitoProxy events raised by the Vaultplg contract.
type VaultplgUpdateIncognitoProxyIterator struct {
	Event *VaultplgUpdateIncognitoProxy // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VaultplgUpdateIncognitoProxyIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VaultplgUpdateIncognitoProxy)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VaultplgUpdateIncognitoProxy)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VaultplgUpdateIncognitoProxyIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VaultplgUpdateIncognitoProxyIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VaultplgUpdateIncognitoProxy represents a UpdateIncognitoProxy event raised by the Vaultplg contract.
type VaultplgUpdateIncognitoProxy struct {
	NewIncognitoProxy common.Address
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterUpdateIncognitoProxy is a free log retrieval operation binding the contract event 0x204252dfe190ad6ef63db40a490f048b39f661de74628408f13cd0bb2d4c3446.
//
// Solidity: event UpdateIncognitoProxy(address newIncognitoProxy)
func (_Vaultplg *VaultplgFilterer) FilterUpdateIncognitoProxy(opts *bind.FilterOpts) (*VaultplgUpdateIncognitoProxyIterator, error) {

	logs, sub, err := _Vaultplg.contract.FilterLogs(opts, "UpdateIncognitoProxy")
	if err != nil {
		return nil, err
	}
	return &VaultplgUpdateIncognitoProxyIterator{contract: _Vaultplg.contract, event: "UpdateIncognitoProxy", logs: logs, sub: sub}, nil
}

// WatchUpdateIncognitoProxy is a free log subscription operation binding the contract event 0x204252dfe190ad6ef63db40a490f048b39f661de74628408f13cd0bb2d4c3446.
//
// Solidity: event UpdateIncognitoProxy(address newIncognitoProxy)
func (_Vaultplg *VaultplgFilterer) WatchUpdateIncognitoProxy(opts *bind.WatchOpts, sink chan<- *VaultplgUpdateIncognitoProxy) (event.Subscription, error) {

	logs, sub, err := _Vaultplg.contract.WatchLogs(opts, "UpdateIncognitoProxy")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VaultplgUpdateIncognitoProxy)
				if err := _Vaultplg.contract.UnpackLog(event, "UpdateIncognitoProxy", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateIncognitoProxy is a log parse operation binding the contract event 0x204252dfe190ad6ef63db40a490f048b39f661de74628408f13cd0bb2d4c3446.
//
// Solidity: event UpdateIncognitoProxy(address newIncognitoProxy)
func (_Vaultplg *VaultplgFilterer) ParseUpdateIncognitoProxy(log types.Log) (*VaultplgUpdateIncognitoProxy, error) {
	event := new(VaultplgUpdateIncognitoProxy)
	if err := _Vaultplg.contract.UnpackLog(event, "UpdateIncognitoProxy", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// VaultplgUpdateTokenTotalIterator is returned from FilterUpdateTokenTotal and is used to iterate over the raw logs and unpacked data for UpdateTokenTotal events raised by the Vaultplg contract.
type VaultplgUpdateTokenTotalIterator struct {
	Event *VaultplgUpdateTokenTotal // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VaultplgUpdateTokenTotalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VaultplgUpdateTokenTotal)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VaultplgUpdateTokenTotal)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VaultplgUpdateTokenTotalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VaultplgUpdateTokenTotalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VaultplgUpdateTokenTotal represents a UpdateTokenTotal event raised by the Vaultplg contract.
type VaultplgUpdateTokenTotal struct {
	Assets  []common.Address
	Amounts []*big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUpdateTokenTotal is a free log retrieval operation binding the contract event 0x6a7fbbcddfd518bb8c56b28ac6c7acb0f7ca093ed232eb3306e53d14e469895f.
//
// Solidity: event UpdateTokenTotal(address[] assets, uint256[] amounts)
func (_Vaultplg *VaultplgFilterer) FilterUpdateTokenTotal(opts *bind.FilterOpts) (*VaultplgUpdateTokenTotalIterator, error) {

	logs, sub, err := _Vaultplg.contract.FilterLogs(opts, "UpdateTokenTotal")
	if err != nil {
		return nil, err
	}
	return &VaultplgUpdateTokenTotalIterator{contract: _Vaultplg.contract, event: "UpdateTokenTotal", logs: logs, sub: sub}, nil
}

// WatchUpdateTokenTotal is a free log subscription operation binding the contract event 0x6a7fbbcddfd518bb8c56b28ac6c7acb0f7ca093ed232eb3306e53d14e469895f.
//
// Solidity: event UpdateTokenTotal(address[] assets, uint256[] amounts)
func (_Vaultplg *VaultplgFilterer) WatchUpdateTokenTotal(opts *bind.WatchOpts, sink chan<- *VaultplgUpdateTokenTotal) (event.Subscription, error) {

	logs, sub, err := _Vaultplg.contract.WatchLogs(opts, "UpdateTokenTotal")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VaultplgUpdateTokenTotal)
				if err := _Vaultplg.contract.UnpackLog(event, "UpdateTokenTotal", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateTokenTotal is a log parse operation binding the contract event 0x6a7fbbcddfd518bb8c56b28ac6c7acb0f7ca093ed232eb3306e53d14e469895f.
//
// Solidity: event UpdateTokenTotal(address[] assets, uint256[] amounts)
func (_Vaultplg *VaultplgFilterer) ParseUpdateTokenTotal(log types.Log) (*VaultplgUpdateTokenTotal, error) {
	event := new(VaultplgUpdateTokenTotal)
	if err := _Vaultplg.contract.UnpackLog(event, "UpdateTokenTotal", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// VaultplgWithdrawIterator is returned from FilterWithdraw and is used to iterate over the raw logs and unpacked data for Withdraw events raised by the Vaultplg contract.
type VaultplgWithdrawIterator struct {
	Event *VaultplgWithdraw // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VaultplgWithdrawIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VaultplgWithdraw)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VaultplgWithdraw)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VaultplgWithdrawIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VaultplgWithdrawIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VaultplgWithdraw represents a Withdraw event raised by the Vaultplg contract.
type VaultplgWithdraw struct {
	Token  common.Address
	To     common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterWithdraw is a free log retrieval operation binding the contract event 0x9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb.
//
// Solidity: event Withdraw(address token, address to, uint256 amount)
func (_Vaultplg *VaultplgFilterer) FilterWithdraw(opts *bind.FilterOpts) (*VaultplgWithdrawIterator, error) {

	logs, sub, err := _Vaultplg.contract.FilterLogs(opts, "Withdraw")
	if err != nil {
		return nil, err
	}
	return &VaultplgWithdrawIterator{contract: _Vaultplg.contract, event: "Withdraw", logs: logs, sub: sub}, nil
}

// WatchWithdraw is a free log subscription operation binding the contract event 0x9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb.
//
// Solidity: event Withdraw(address token, address to, uint256 amount)
func (_Vaultplg *VaultplgFilterer) WatchWithdraw(opts *bind.WatchOpts, sink chan<- *VaultplgWithdraw) (event.Subscription, error) {

	logs, sub, err := _Vaultplg.contract.WatchLogs(opts, "Withdraw")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VaultplgWithdraw)
				if err := _Vaultplg.contract.UnpackLog(event, "Withdraw", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdraw is a log parse operation binding the contract event 0x9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb.
//
// Solidity: event Withdraw(address token, address to, uint256 amount)
func (_Vaultplg *VaultplgFilterer) ParseWithdraw(log types.Log) (*VaultplgWithdraw, error) {
	event := new(VaultplgWithdraw)
	if err := _Vaultplg.contract.UnpackLog(event, "Withdraw", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
