// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package pdexbsc

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// PdexbscMetaData contains all meta data concerning the Pdexbsc contract.
var PdexbscMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"incognitoProxy_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vault_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"incognitoAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"incognitoAddress\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incognitoProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"inst\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"heights\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"instPaths\",\"type\":\"bytes32[]\"},{\"internalType\":\"bool[]\",\"name\":\"instPathIsLefts\",\"type\":\"bool[]\"},{\"internalType\":\"bytes32\",\"name\":\"instRoots\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"blkData\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"sigIdxs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"sigVs\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"sigRs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"sigSs\",\"type\":\"bytes32[]\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b50604051620032d1380380620032d18339818101604052810190620000379190620003a7565b83600490805190602001906200004f929190620000f5565b50826005908051906020019062000068929190620000f5565b5081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050620004bc565b828054620001039062000486565b90600052602060002090601f01602090048101928262000127576000855562000173565b82601f106200014257805160ff191683800117855562000173565b8280016001018555821562000173579182015b828111156200017257825182559160200191906001019062000155565b5b50905062000182919062000186565b5090565b5b80821115620001a157600081600090555060010162000187565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200020e82620001c3565b810181811067ffffffffffffffff8211171562000230576200022f620001d4565b5b80604052505050565b600062000245620001a5565b905062000253828262000203565b919050565b600067ffffffffffffffff821115620002765762000275620001d4565b5b6200028182620001c3565b9050602081019050919050565b60005b83811015620002ae57808201518184015260208101905062000291565b83811115620002be576000848401525b50505050565b6000620002db620002d58462000258565b62000239565b905082815260208101848484011115620002fa57620002f9620001be565b5b620003078482856200028e565b509392505050565b600082601f830112620003275762000326620001b9565b5b815162000339848260208601620002c4565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200036f8262000342565b9050919050565b620003818162000362565b81146200038d57600080fd5b50565b600081519050620003a18162000376565b92915050565b60008060008060808587031215620003c457620003c3620001af565b5b600085015167ffffffffffffffff811115620003e557620003e4620001b4565b5b620003f3878288016200030f565b945050602085015167ffffffffffffffff811115620004175762000416620001b4565b5b62000425878288016200030f565b9350506040620004388782880162000390565b92505060606200044b8782880162000390565b91505092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200049f57607f821691505b60208210811415620004b657620004b562000457565b5b50919050565b612e0580620004cc6000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c806370a0823111610097578063a9059cbb11610066578063a9059cbb146102b0578063b48272cc146102e0578063dd62ed3e14610310578063fbfa77cf14610340576100f5565b806370a08231146102145780637ba692b61461024457806395d89b4114610262578063a457c2d714610280576100f5565b806323b872dd116100d357806323b872dd1461016657806324f178ff14610196578063313ce567146101c657806339509351146101e4576100f5565b806306fdde03146100fa578063095ea7b31461011857806318160ddd14610148575b600080fd5b61010261035e565b60405161010f91906115de565b60405180910390f35b610132600480360381019061012d91906116a8565b6103f0565b60405161013f9190611703565b60405180910390f35b61015061040e565b60405161015d919061172d565b60405180910390f35b610180600480360381019061017b9190611748565b610418565b60405161018d9190611703565b60405180910390f35b6101b060048036038101906101ab9190611c7c565b610510565b6040516101bd9190611703565b60405180910390f35b6101ce6107ed565b6040516101db9190611e2e565b60405180910390f35b6101fe60048036038101906101f991906116a8565b6107f6565b60405161020b9190611703565b60405180910390f35b61022e60048036038101906102299190611e49565b6108a2565b60405161023b919061172d565b60405180910390f35b61024c6108ea565b6040516102599190611e85565b60405180910390f35b61026a610914565b60405161027791906115de565b60405180910390f35b61029a600480360381019061029591906116a8565b6109a6565b6040516102a79190611703565b60405180910390f35b6102ca60048036038101906102c591906116a8565b610a91565b6040516102d79190611703565b60405180910390f35b6102fa60048036038101906102f59190611efb565b610aaf565b6040516103079190611703565b60405180910390f35b61032a60048036038101906103259190611f5b565b610cd8565b604051610337919061172d565b60405180910390f35b610348610d5f565b6040516103559190611e85565b60405180910390f35b60606004805461036d90611fca565b80601f016020809104026020016040519081016040528092919081815260200182805461039990611fca565b80156103e65780601f106103bb576101008083540402835291602001916103e6565b820191906000526020600020905b8154815290600101906020018083116103c957829003601f168201915b5050505050905090565b60006104046103fd610d89565b8484610d91565b6001905092915050565b6000600354905090565b6000610425848484610f5c565b6000600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000610470610d89565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050828110156104f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e79061206e565b60405180910390fd5b610504856104fc610d89565b858403610d91565b60019150509392505050565b600060828b511015610557576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054e906120da565b60405180910390fd5b60006105628c61126e565b90506099816000015160ff1614801561058257506001816020015160ff16145b6105c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b890612146565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff16816040015173ffffffffffffffffffffffffffffffffffffffff1614610633576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062a906121b2565b60405180910390fd5b600260008260a00151815260200190815260200160002060009054906101000a900460ff1615610698576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068f9061221e565b60405180910390fd5b6001600260008360a00151815260200190815260200160002060006101000a81548160ff0219169083151502179055506106da8c8c8c8c8c8c8c8c8c8c611397565b6000816060015190506000826080015190506106f8600083836114d0565b806003600082825461070a919061226d565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461075f919061226d565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516107c4919061172d565b60405180910390a36107d8600083836114d5565b600193505050509a9950505050505050505050565b60006009905090565b6000610898610803610d89565b848460016000610811610d89565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610893919061226d565b610d91565b6001905092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606005805461092390611fca565b80601f016020809104026020016040519081016040528092919081815260200182805461094f90611fca565b801561099c5780601f106109715761010080835404028352916020019161099c565b820191906000526020600020905b81548152906001019060200180831161097f57829003601f168201915b5050505050905090565b600080600160006109b5610d89565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015610a72576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6990612335565b60405180910390fd5b610a86610a7d610d89565b85858403610d91565b600191505092915050565b6000610aa5610a9e610d89565b8484610f5c565b6001905092915050565b600080610aba610d89565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610b2c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b23906123c7565b60405180910390fd5b610b38816000856114d0565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905083811015610bbe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bb590612459565b60405180910390fd5b8381036000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508360036000828254610c159190612479565b92505081905550610c28826000866114d5565b7f2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e30878787604051610c5d94939291906124da565b60405180910390a1600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef86604051610cc3919061172d565b60405180910390a36001925050509392505050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610e01576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610df89061258c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610e71576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e689061261e565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051610f4f919061172d565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610fcc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fc3906126b0565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561103c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161103390612742565b60405180910390fd5b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156110cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110c4906127d4565b60405180910390fd5b6110d88383836114d0565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101561115e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161115590612866565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546111f1919061226d565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611255919061172d565b60405180910390a36112688484846114d5565b50505050565b6112766114da565b61127e6114da565b8260008151811061129257611291612886565b5b602001015160f81c60f81b60f81c816000019060ff16908160ff1681525050826001815181106112c5576112c4612886565b5b602001015160f81c60f81b60f81c816020019060ff16908160ff16815250506000806000806022870151935060428701519250606287015191506082870151905083856040019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505082856060019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505081856080018181525050808560a00181815250508495505050505050919050565b60008a8a6040516020016113ac92919061291d565b604051602081830303815290604052805190602001209050600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f65d21166001838d8d8d8d8d8d8d8d8d6040518c63ffffffff1660e01b81526004016114349b9a99989796959493929190612c4c565b60206040518083038186803b15801561144c57600080fd5b505afa158015611460573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114849190612d36565b6114c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114ba90612daf565b60405180910390fd5b5050505050505050505050565b505050565b505050565b6040518060c00160405280600060ff168152602001600060ff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600080191681525090565b600081519050919050565b600082825260208201905092915050565b60005b8381101561157f578082015181840152602081019050611564565b8381111561158e576000848401525b50505050565b6000601f19601f8301169050919050565b60006115b082611545565b6115ba8185611550565b93506115ca818560208601611561565b6115d381611594565b840191505092915050565b600060208201905081810360008301526115f881846115a5565b905092915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061163f82611614565b9050919050565b61164f81611634565b811461165a57600080fd5b50565b60008135905061166c81611646565b92915050565b6000819050919050565b61168581611672565b811461169057600080fd5b50565b6000813590506116a28161167c565b92915050565b600080604083850312156116bf576116be61160a565b5b60006116cd8582860161165d565b92505060206116de85828601611693565b9150509250929050565b60008115159050919050565b6116fd816116e8565b82525050565b600060208201905061171860008301846116f4565b92915050565b61172781611672565b82525050565b6000602082019050611742600083018461171e565b92915050565b6000806000606084860312156117615761176061160a565b5b600061176f8682870161165d565b93505060206117808682870161165d565b925050604061179186828701611693565b9150509250925092565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6117dd82611594565b810181811067ffffffffffffffff821117156117fc576117fb6117a5565b5b80604052505050565b600061180f611600565b905061181b82826117d4565b919050565b600067ffffffffffffffff82111561183b5761183a6117a5565b5b61184482611594565b9050602081019050919050565b82818337600083830152505050565b600061187361186e84611820565b611805565b90508281526020810184848401111561188f5761188e6117a0565b5b61189a848285611851565b509392505050565b600082601f8301126118b7576118b661179b565b5b81356118c7848260208601611860565b91505092915050565b600067ffffffffffffffff8211156118eb576118ea6117a5565b5b602082029050602081019050919050565b600080fd5b6000819050919050565b61191481611901565b811461191f57600080fd5b50565b6000813590506119318161190b565b92915050565b600061194a611945846118d0565b611805565b9050808382526020820190506020840283018581111561196d5761196c6118fc565b5b835b8181101561199657806119828882611922565b84526020840193505060208101905061196f565b5050509392505050565b600082601f8301126119b5576119b461179b565b5b81356119c5848260208601611937565b91505092915050565b600067ffffffffffffffff8211156119e9576119e86117a5565b5b602082029050602081019050919050565b611a03816116e8565b8114611a0e57600080fd5b50565b600081359050611a20816119fa565b92915050565b6000611a39611a34846119ce565b611805565b90508083825260208201905060208402830185811115611a5c57611a5b6118fc565b5b835b81811015611a855780611a718882611a11565b845260208401935050602081019050611a5e565b5050509392505050565b600082601f830112611aa457611aa361179b565b5b8135611ab4848260208601611a26565b91505092915050565b600067ffffffffffffffff821115611ad857611ad76117a5565b5b602082029050602081019050919050565b6000611afc611af784611abd565b611805565b90508083825260208201905060208402830185811115611b1f57611b1e6118fc565b5b835b81811015611b485780611b348882611693565b845260208401935050602081019050611b21565b5050509392505050565b600082601f830112611b6757611b6661179b565b5b8135611b77848260208601611ae9565b91505092915050565b600067ffffffffffffffff821115611b9b57611b9a6117a5565b5b602082029050602081019050919050565b600060ff82169050919050565b611bc281611bac565b8114611bcd57600080fd5b50565b600081359050611bdf81611bb9565b92915050565b6000611bf8611bf384611b80565b611805565b90508083825260208201905060208402830185811115611c1b57611c1a6118fc565b5b835b81811015611c445780611c308882611bd0565b845260208401935050602081019050611c1d565b5050509392505050565b600082601f830112611c6357611c6261179b565b5b8135611c73848260208601611be5565b91505092915050565b6000806000806000806000806000806101408b8d031215611ca057611c9f61160a565b5b60008b013567ffffffffffffffff811115611cbe57611cbd61160f565b5b611cca8d828e016118a2565b9a50506020611cdb8d828e01611693565b99505060408b013567ffffffffffffffff811115611cfc57611cfb61160f565b5b611d088d828e016119a0565b98505060608b013567ffffffffffffffff811115611d2957611d2861160f565b5b611d358d828e01611a8f565b9750506080611d468d828e01611922565b96505060a0611d578d828e01611922565b95505060c08b013567ffffffffffffffff811115611d7857611d7761160f565b5b611d848d828e01611b52565b94505060e08b013567ffffffffffffffff811115611da557611da461160f565b5b611db18d828e01611c4e565b9350506101008b013567ffffffffffffffff811115611dd357611dd261160f565b5b611ddf8d828e016119a0565b9250506101208b013567ffffffffffffffff811115611e0157611e0061160f565b5b611e0d8d828e016119a0565b9150509295989b9194979a5092959850565b611e2881611bac565b82525050565b6000602082019050611e436000830184611e1f565b92915050565b600060208284031215611e5f57611e5e61160a565b5b6000611e6d8482850161165d565b91505092915050565b611e7f81611634565b82525050565b6000602082019050611e9a6000830184611e76565b92915050565b600080fd5b60008083601f840112611ebb57611eba61179b565b5b8235905067ffffffffffffffff811115611ed857611ed7611ea0565b5b602083019150836001820283011115611ef457611ef36118fc565b5b9250929050565b600080600060408486031215611f1457611f1361160a565b5b600084013567ffffffffffffffff811115611f3257611f3161160f565b5b611f3e86828701611ea5565b93509350506020611f5186828701611693565b9150509250925092565b60008060408385031215611f7257611f7161160a565b5b6000611f808582860161165d565b9250506020611f918582860161165d565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611fe257607f821691505b60208210811415611ff657611ff5611f9b565b5b50919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206160008201527f6c6c6f77616e6365000000000000000000000000000000000000000000000000602082015250565b6000612058602883611550565b915061206382611ffc565b604082019050919050565b600060208201905081810360008301526120878161204b565b9050919050565b7f45524332303a20696e76616c696420696e737400000000000000000000000000600082015250565b60006120c4601383611550565b91506120cf8261208e565b602082019050919050565b600060208201905081810360008301526120f3816120b7565b9050919050565b7f45524332303a20696e76616c696420696e737427732064617461000000000000600082015250565b6000612130601a83611550565b915061213b826120fa565b602082019050919050565b6000602082019050818103600083015261215f81612123565b9050919050565b7f45524332303a20696e76616c696420746f6b656e000000000000000000000000600082015250565b600061219c601483611550565b91506121a782612166565b602082019050919050565b600060208201905081810360008301526121cb8161218f565b9050919050565b7f45524332303a20747820697320616c7265616479207573656400000000000000600082015250565b6000612208601983611550565b9150612213826121d2565b602082019050919050565b60006020820190508181036000830152612237816121fb565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061227882611672565b915061228383611672565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156122b8576122b761223e565b5b828201905092915050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b600061231f602583611550565b915061232a826122c3565b604082019050919050565b6000602082019050818103600083015261234e81612312565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b60006123b1602183611550565b91506123bc82612355565b604082019050919050565b600060208201905081810360008301526123e0816123a4565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b6000612443602283611550565b915061244e826123e7565b604082019050919050565b6000602082019050818103600083015261247281612436565b9050919050565b600061248482611672565b915061248f83611672565b9250828210156124a2576124a161223e565b5b828203905092915050565b60006124b98385611550565b93506124c6838584611851565b6124cf83611594565b840190509392505050565b60006060820190506124ef6000830187611e76565b81810360208301526125028185876124ad565b9050612511604083018461171e565b95945050505050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000612576602483611550565b91506125818261251a565b604082019050919050565b600060208201905081810360008301526125a581612569565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000612608602283611550565b9150612613826125ac565b604082019050919050565b60006020820190508181036000830152612637816125fb565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b600061269a602583611550565b91506126a58261263e565b604082019050919050565b600060208201905081810360008301526126c98161268d565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b600061272c602383611550565b9150612737826126d0565b604082019050919050565b6000602082019050818103600083015261275b8161271f565b9050919050565b7f45524332303a207472616e7366657220746f20696e636f676e69746f2076617560008201527f6c74206164647265737300000000000000000000000000000000000000000000602082015250565b60006127be602a83611550565b91506127c982612762565b604082019050919050565b600060208201905081810360008301526127ed816127b1565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b6000612850602683611550565b915061285b826127f4565b604082019050919050565b6000602082019050818103600083015261287f81612843565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081519050919050565b600081905092915050565b60006128d6826128b5565b6128e081856128c0565b93506128f0818560208601611561565b80840191505092915050565b6000819050919050565b61291761291282611672565b6128fc565b82525050565b600061292982856128cb565b91506129358284612906565b6020820191508190509392505050565b61294e81611901565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61298981611901565b82525050565b600061299b8383612980565b60208301905092915050565b6000602082019050919050565b60006129bf82612954565b6129c9818561295f565b93506129d483612970565b8060005b83811015612a055781516129ec888261298f565b97506129f7836129a7565b9250506001810190506129d8565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612a47816116e8565b82525050565b6000612a598383612a3e565b60208301905092915050565b6000602082019050919050565b6000612a7d82612a12565b612a878185612a1d565b9350612a9283612a2e565b8060005b83811015612ac3578151612aaa8882612a4d565b9750612ab583612a65565b925050600181019050612a96565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612b0581611672565b82525050565b6000612b178383612afc565b60208301905092915050565b6000602082019050919050565b6000612b3b82612ad0565b612b458185612adb565b9350612b5083612aec565b8060005b83811015612b81578151612b688882612b0b565b9750612b7383612b23565b925050600181019050612b54565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612bc381611bac565b82525050565b6000612bd58383612bba565b60208301905092915050565b6000602082019050919050565b6000612bf982612b8e565b612c038185612b99565b9350612c0e83612baa565b8060005b83811015612c3f578151612c268882612bc9565b9750612c3183612be1565b925050600181019050612c12565b5085935050505092915050565b600061016082019050612c62600083018e6116f4565b612c6f602083018d612945565b612c7c604083018c61171e565b8181036060830152612c8e818b6129b4565b90508181036080830152612ca2818a612a72565b9050612cb160a0830189612945565b612cbe60c0830188612945565b81810360e0830152612cd08187612b30565b9050818103610100830152612ce58186612bee565b9050818103610120830152612cfa81856129b4565b9050818103610140830152612d0f81846129b4565b90509c9b505050505050505050505050565b600081519050612d30816119fa565b92915050565b600060208284031215612d4c57612d4b61160a565b5b6000612d5a84828501612d21565b91505092915050565b7f45524332303a20696e76616c696420696e707574206d696e7420646174610000600082015250565b6000612d99601e83611550565b9150612da482612d63565b602082019050919050565b60006020820190508181036000830152612dc881612d8c565b905091905056fea2646970667358221220f332c02cdac12ada075a921be0005d0130ab616e2094b0f29723a20c948af76864736f6c63430008090033",
}

// PdexbscABI is the input ABI used to generate the binding from.
// Deprecated: Use PdexbscMetaData.ABI instead.
var PdexbscABI = PdexbscMetaData.ABI

// PdexbscBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use PdexbscMetaData.Bin instead.
var PdexbscBin = PdexbscMetaData.Bin

// DeployPdexbsc deploys a new Ethereum contract, binding an instance of Pdexbsc to it.
func DeployPdexbsc(auth *bind.TransactOpts, backend bind.ContractBackend, name_ string, symbol_ string, incognitoProxy_ common.Address, vault_ common.Address) (common.Address, *types.Transaction, *Pdexbsc, error) {
	parsed, err := PdexbscMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(PdexbscBin), backend, name_, symbol_, incognitoProxy_, vault_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Pdexbsc{PdexbscCaller: PdexbscCaller{contract: contract}, PdexbscTransactor: PdexbscTransactor{contract: contract}, PdexbscFilterer: PdexbscFilterer{contract: contract}}, nil
}

// Pdexbsc is an auto generated Go binding around an Ethereum contract.
type Pdexbsc struct {
	PdexbscCaller     // Read-only binding to the contract
	PdexbscTransactor // Write-only binding to the contract
	PdexbscFilterer   // Log filterer for contract events
}

// PdexbscCaller is an auto generated read-only Go binding around an Ethereum contract.
type PdexbscCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PdexbscTransactor is an auto generated write-only Go binding around an Ethereum contract.
type PdexbscTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PdexbscFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type PdexbscFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PdexbscSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type PdexbscSession struct {
	Contract     *Pdexbsc          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// PdexbscCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type PdexbscCallerSession struct {
	Contract *PdexbscCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// PdexbscTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type PdexbscTransactorSession struct {
	Contract     *PdexbscTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// PdexbscRaw is an auto generated low-level Go binding around an Ethereum contract.
type PdexbscRaw struct {
	Contract *Pdexbsc // Generic contract binding to access the raw methods on
}

// PdexbscCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type PdexbscCallerRaw struct {
	Contract *PdexbscCaller // Generic read-only contract binding to access the raw methods on
}

// PdexbscTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type PdexbscTransactorRaw struct {
	Contract *PdexbscTransactor // Generic write-only contract binding to access the raw methods on
}

// NewPdexbsc creates a new instance of Pdexbsc, bound to a specific deployed contract.
func NewPdexbsc(address common.Address, backend bind.ContractBackend) (*Pdexbsc, error) {
	contract, err := bindPdexbsc(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Pdexbsc{PdexbscCaller: PdexbscCaller{contract: contract}, PdexbscTransactor: PdexbscTransactor{contract: contract}, PdexbscFilterer: PdexbscFilterer{contract: contract}}, nil
}

// NewPdexbscCaller creates a new read-only instance of Pdexbsc, bound to a specific deployed contract.
func NewPdexbscCaller(address common.Address, caller bind.ContractCaller) (*PdexbscCaller, error) {
	contract, err := bindPdexbsc(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PdexbscCaller{contract: contract}, nil
}

// NewPdexbscTransactor creates a new write-only instance of Pdexbsc, bound to a specific deployed contract.
func NewPdexbscTransactor(address common.Address, transactor bind.ContractTransactor) (*PdexbscTransactor, error) {
	contract, err := bindPdexbsc(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PdexbscTransactor{contract: contract}, nil
}

// NewPdexbscFilterer creates a new log filterer instance of Pdexbsc, bound to a specific deployed contract.
func NewPdexbscFilterer(address common.Address, filterer bind.ContractFilterer) (*PdexbscFilterer, error) {
	contract, err := bindPdexbsc(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &PdexbscFilterer{contract: contract}, nil
}

// bindPdexbsc binds a generic wrapper to an already deployed contract.
func bindPdexbsc(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(PdexbscABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Pdexbsc *PdexbscRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Pdexbsc.Contract.PdexbscCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Pdexbsc *PdexbscRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Pdexbsc.Contract.PdexbscTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Pdexbsc *PdexbscRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Pdexbsc.Contract.PdexbscTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Pdexbsc *PdexbscCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Pdexbsc.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Pdexbsc *PdexbscTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Pdexbsc.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Pdexbsc *PdexbscTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Pdexbsc.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_Pdexbsc *PdexbscCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Pdexbsc.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_Pdexbsc *PdexbscSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _Pdexbsc.Contract.Allowance(&_Pdexbsc.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_Pdexbsc *PdexbscCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _Pdexbsc.Contract.Allowance(&_Pdexbsc.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_Pdexbsc *PdexbscCaller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Pdexbsc.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_Pdexbsc *PdexbscSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _Pdexbsc.Contract.BalanceOf(&_Pdexbsc.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_Pdexbsc *PdexbscCallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _Pdexbsc.Contract.BalanceOf(&_Pdexbsc.CallOpts, account)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_Pdexbsc *PdexbscCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _Pdexbsc.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_Pdexbsc *PdexbscSession) Decimals() (uint8, error) {
	return _Pdexbsc.Contract.Decimals(&_Pdexbsc.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_Pdexbsc *PdexbscCallerSession) Decimals() (uint8, error) {
	return _Pdexbsc.Contract.Decimals(&_Pdexbsc.CallOpts)
}

// IncognitoProxy is a free data retrieval call binding the contract method 0x7ba692b6.
//
// Solidity: function incognitoProxy() view returns(address)
func (_Pdexbsc *PdexbscCaller) IncognitoProxy(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Pdexbsc.contract.Call(opts, &out, "incognitoProxy")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// IncognitoProxy is a free data retrieval call binding the contract method 0x7ba692b6.
//
// Solidity: function incognitoProxy() view returns(address)
func (_Pdexbsc *PdexbscSession) IncognitoProxy() (common.Address, error) {
	return _Pdexbsc.Contract.IncognitoProxy(&_Pdexbsc.CallOpts)
}

// IncognitoProxy is a free data retrieval call binding the contract method 0x7ba692b6.
//
// Solidity: function incognitoProxy() view returns(address)
func (_Pdexbsc *PdexbscCallerSession) IncognitoProxy() (common.Address, error) {
	return _Pdexbsc.Contract.IncognitoProxy(&_Pdexbsc.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Pdexbsc *PdexbscCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Pdexbsc.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Pdexbsc *PdexbscSession) Name() (string, error) {
	return _Pdexbsc.Contract.Name(&_Pdexbsc.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Pdexbsc *PdexbscCallerSession) Name() (string, error) {
	return _Pdexbsc.Contract.Name(&_Pdexbsc.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Pdexbsc *PdexbscCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Pdexbsc.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Pdexbsc *PdexbscSession) Symbol() (string, error) {
	return _Pdexbsc.Contract.Symbol(&_Pdexbsc.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Pdexbsc *PdexbscCallerSession) Symbol() (string, error) {
	return _Pdexbsc.Contract.Symbol(&_Pdexbsc.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Pdexbsc *PdexbscCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Pdexbsc.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Pdexbsc *PdexbscSession) TotalSupply() (*big.Int, error) {
	return _Pdexbsc.Contract.TotalSupply(&_Pdexbsc.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Pdexbsc *PdexbscCallerSession) TotalSupply() (*big.Int, error) {
	return _Pdexbsc.Contract.TotalSupply(&_Pdexbsc.CallOpts)
}

// Vault is a free data retrieval call binding the contract method 0xfbfa77cf.
//
// Solidity: function vault() view returns(address)
func (_Pdexbsc *PdexbscCaller) Vault(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Pdexbsc.contract.Call(opts, &out, "vault")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Vault is a free data retrieval call binding the contract method 0xfbfa77cf.
//
// Solidity: function vault() view returns(address)
func (_Pdexbsc *PdexbscSession) Vault() (common.Address, error) {
	return _Pdexbsc.Contract.Vault(&_Pdexbsc.CallOpts)
}

// Vault is a free data retrieval call binding the contract method 0xfbfa77cf.
//
// Solidity: function vault() view returns(address)
func (_Pdexbsc *PdexbscCallerSession) Vault() (common.Address, error) {
	return _Pdexbsc.Contract.Vault(&_Pdexbsc.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_Pdexbsc *PdexbscTransactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Pdexbsc.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_Pdexbsc *PdexbscSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Pdexbsc.Contract.Approve(&_Pdexbsc.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_Pdexbsc *PdexbscTransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Pdexbsc.Contract.Approve(&_Pdexbsc.TransactOpts, spender, amount)
}

// Burn is a paid mutator transaction binding the contract method 0xb48272cc.
//
// Solidity: function burn(string incognitoAddress, uint256 amount) returns(bool)
func (_Pdexbsc *PdexbscTransactor) Burn(opts *bind.TransactOpts, incognitoAddress string, amount *big.Int) (*types.Transaction, error) {
	return _Pdexbsc.contract.Transact(opts, "burn", incognitoAddress, amount)
}

// Burn is a paid mutator transaction binding the contract method 0xb48272cc.
//
// Solidity: function burn(string incognitoAddress, uint256 amount) returns(bool)
func (_Pdexbsc *PdexbscSession) Burn(incognitoAddress string, amount *big.Int) (*types.Transaction, error) {
	return _Pdexbsc.Contract.Burn(&_Pdexbsc.TransactOpts, incognitoAddress, amount)
}

// Burn is a paid mutator transaction binding the contract method 0xb48272cc.
//
// Solidity: function burn(string incognitoAddress, uint256 amount) returns(bool)
func (_Pdexbsc *PdexbscTransactorSession) Burn(incognitoAddress string, amount *big.Int) (*types.Transaction, error) {
	return _Pdexbsc.Contract.Burn(&_Pdexbsc.TransactOpts, incognitoAddress, amount)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_Pdexbsc *PdexbscTransactor) DecreaseAllowance(opts *bind.TransactOpts, spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _Pdexbsc.contract.Transact(opts, "decreaseAllowance", spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_Pdexbsc *PdexbscSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _Pdexbsc.Contract.DecreaseAllowance(&_Pdexbsc.TransactOpts, spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_Pdexbsc *PdexbscTransactorSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _Pdexbsc.Contract.DecreaseAllowance(&_Pdexbsc.TransactOpts, spender, subtractedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_Pdexbsc *PdexbscTransactor) IncreaseAllowance(opts *bind.TransactOpts, spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _Pdexbsc.contract.Transact(opts, "increaseAllowance", spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_Pdexbsc *PdexbscSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _Pdexbsc.Contract.IncreaseAllowance(&_Pdexbsc.TransactOpts, spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_Pdexbsc *PdexbscTransactorSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _Pdexbsc.Contract.IncreaseAllowance(&_Pdexbsc.TransactOpts, spender, addedValue)
}

// Mint is a paid mutator transaction binding the contract method 0x24f178ff.
//
// Solidity: function mint(bytes inst, uint256 heights, bytes32[] instPaths, bool[] instPathIsLefts, bytes32 instRoots, bytes32 blkData, uint256[] sigIdxs, uint8[] sigVs, bytes32[] sigRs, bytes32[] sigSs) returns(bool)
func (_Pdexbsc *PdexbscTransactor) Mint(opts *bind.TransactOpts, inst []byte, heights *big.Int, instPaths [][32]byte, instPathIsLefts []bool, instRoots [32]byte, blkData [32]byte, sigIdxs []*big.Int, sigVs []uint8, sigRs [][32]byte, sigSs [][32]byte) (*types.Transaction, error) {
	return _Pdexbsc.contract.Transact(opts, "mint", inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// Mint is a paid mutator transaction binding the contract method 0x24f178ff.
//
// Solidity: function mint(bytes inst, uint256 heights, bytes32[] instPaths, bool[] instPathIsLefts, bytes32 instRoots, bytes32 blkData, uint256[] sigIdxs, uint8[] sigVs, bytes32[] sigRs, bytes32[] sigSs) returns(bool)
func (_Pdexbsc *PdexbscSession) Mint(inst []byte, heights *big.Int, instPaths [][32]byte, instPathIsLefts []bool, instRoots [32]byte, blkData [32]byte, sigIdxs []*big.Int, sigVs []uint8, sigRs [][32]byte, sigSs [][32]byte) (*types.Transaction, error) {
	return _Pdexbsc.Contract.Mint(&_Pdexbsc.TransactOpts, inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// Mint is a paid mutator transaction binding the contract method 0x24f178ff.
//
// Solidity: function mint(bytes inst, uint256 heights, bytes32[] instPaths, bool[] instPathIsLefts, bytes32 instRoots, bytes32 blkData, uint256[] sigIdxs, uint8[] sigVs, bytes32[] sigRs, bytes32[] sigSs) returns(bool)
func (_Pdexbsc *PdexbscTransactorSession) Mint(inst []byte, heights *big.Int, instPaths [][32]byte, instPathIsLefts []bool, instRoots [32]byte, blkData [32]byte, sigIdxs []*big.Int, sigVs []uint8, sigRs [][32]byte, sigSs [][32]byte) (*types.Transaction, error) {
	return _Pdexbsc.Contract.Mint(&_Pdexbsc.TransactOpts, inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_Pdexbsc *PdexbscTransactor) Transfer(opts *bind.TransactOpts, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Pdexbsc.contract.Transact(opts, "transfer", recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_Pdexbsc *PdexbscSession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Pdexbsc.Contract.Transfer(&_Pdexbsc.TransactOpts, recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_Pdexbsc *PdexbscTransactorSession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Pdexbsc.Contract.Transfer(&_Pdexbsc.TransactOpts, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_Pdexbsc *PdexbscTransactor) TransferFrom(opts *bind.TransactOpts, sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Pdexbsc.contract.Transact(opts, "transferFrom", sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_Pdexbsc *PdexbscSession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Pdexbsc.Contract.TransferFrom(&_Pdexbsc.TransactOpts, sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_Pdexbsc *PdexbscTransactorSession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Pdexbsc.Contract.TransferFrom(&_Pdexbsc.TransactOpts, sender, recipient, amount)
}

// PdexbscApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the Pdexbsc contract.
type PdexbscApprovalIterator struct {
	Event *PdexbscApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PdexbscApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PdexbscApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PdexbscApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PdexbscApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PdexbscApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PdexbscApproval represents a Approval event raised by the Pdexbsc contract.
type PdexbscApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_Pdexbsc *PdexbscFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*PdexbscApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _Pdexbsc.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &PdexbscApprovalIterator{contract: _Pdexbsc.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_Pdexbsc *PdexbscFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *PdexbscApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _Pdexbsc.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PdexbscApproval)
				if err := _Pdexbsc.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_Pdexbsc *PdexbscFilterer) ParseApproval(log types.Log) (*PdexbscApproval, error) {
	event := new(PdexbscApproval)
	if err := _Pdexbsc.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PdexbscDepositIterator is returned from FilterDeposit and is used to iterate over the raw logs and unpacked data for Deposit events raised by the Pdexbsc contract.
type PdexbscDepositIterator struct {
	Event *PdexbscDeposit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PdexbscDepositIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PdexbscDeposit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PdexbscDeposit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PdexbscDepositIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PdexbscDepositIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PdexbscDeposit represents a Deposit event raised by the Pdexbsc contract.
type PdexbscDeposit struct {
	Token            common.Address
	IncognitoAddress string
	Amount           *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterDeposit is a free log retrieval operation binding the contract event 0x2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e.
//
// Solidity: event Deposit(address token, string incognitoAddress, uint256 amount)
func (_Pdexbsc *PdexbscFilterer) FilterDeposit(opts *bind.FilterOpts) (*PdexbscDepositIterator, error) {

	logs, sub, err := _Pdexbsc.contract.FilterLogs(opts, "Deposit")
	if err != nil {
		return nil, err
	}
	return &PdexbscDepositIterator{contract: _Pdexbsc.contract, event: "Deposit", logs: logs, sub: sub}, nil
}

// WatchDeposit is a free log subscription operation binding the contract event 0x2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e.
//
// Solidity: event Deposit(address token, string incognitoAddress, uint256 amount)
func (_Pdexbsc *PdexbscFilterer) WatchDeposit(opts *bind.WatchOpts, sink chan<- *PdexbscDeposit) (event.Subscription, error) {

	logs, sub, err := _Pdexbsc.contract.WatchLogs(opts, "Deposit")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PdexbscDeposit)
				if err := _Pdexbsc.contract.UnpackLog(event, "Deposit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeposit is a log parse operation binding the contract event 0x2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e.
//
// Solidity: event Deposit(address token, string incognitoAddress, uint256 amount)
func (_Pdexbsc *PdexbscFilterer) ParseDeposit(log types.Log) (*PdexbscDeposit, error) {
	event := new(PdexbscDeposit)
	if err := _Pdexbsc.contract.UnpackLog(event, "Deposit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PdexbscTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the Pdexbsc contract.
type PdexbscTransferIterator struct {
	Event *PdexbscTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PdexbscTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PdexbscTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PdexbscTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PdexbscTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PdexbscTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PdexbscTransfer represents a Transfer event raised by the Pdexbsc contract.
type PdexbscTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_Pdexbsc *PdexbscFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*PdexbscTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Pdexbsc.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &PdexbscTransferIterator{contract: _Pdexbsc.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_Pdexbsc *PdexbscFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *PdexbscTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Pdexbsc.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PdexbscTransfer)
				if err := _Pdexbsc.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_Pdexbsc *PdexbscFilterer) ParseTransfer(log types.Log) (*PdexbscTransfer, error) {
	event := new(PdexbscTransfer)
	if err := _Pdexbsc.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
