// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package prvbsc

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// PrvbscMetaData contains all meta data concerning the Prvbsc contract.
var PrvbscMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"incognitoProxy_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vault_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"incognitoAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"incognitoAddress\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incognitoProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"inst\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"heights\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"instPaths\",\"type\":\"bytes32[]\"},{\"internalType\":\"bool[]\",\"name\":\"instPathIsLefts\",\"type\":\"bool[]\"},{\"internalType\":\"bytes32\",\"name\":\"instRoots\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"blkData\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"sigIdxs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"sigVs\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"sigRs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"sigSs\",\"type\":\"bytes32[]\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b50604051620032ed380380620032ed83398181016040528101906200003791906200023a565b83600490805190602001906200004f929190620000f5565b50826005908051906020019062000068929190620000f5565b5081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050620004bc565b8280546200010390620003b3565b90600052602060002090601f01602090048101928262000127576000855562000173565b82601f106200014257805160ff191683800117855562000173565b8280016001018555821562000173579182015b828111156200017257825182559160200191906001019062000155565b5b50905062000182919062000186565b5090565b5b80821115620001a157600081600090555060010162000187565b5090565b6000620001bc620001b68462000313565b620002ea565b905082815260208101848484011115620001db57620001da62000482565b5b620001e88482856200037d565b509392505050565b6000815190506200020181620004a2565b92915050565b600082601f8301126200021f576200021e6200047d565b5b815162000231848260208601620001a5565b91505092915050565b600080600080608085870312156200025757620002566200048c565b5b600085015167ffffffffffffffff81111562000278576200027762000487565b5b620002868782880162000207565b945050602085015167ffffffffffffffff811115620002aa57620002a962000487565b5b620002b88782880162000207565b9350506040620002cb87828801620001f0565b9250506060620002de87828801620001f0565b91505092959194509250565b6000620002f662000309565b9050620003048282620003e9565b919050565b6000604051905090565b600067ffffffffffffffff8211156200033157620003306200044e565b5b6200033c8262000491565b9050602081019050919050565b600062000356826200035d565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60005b838110156200039d57808201518184015260208101905062000380565b83811115620003ad576000848401525b50505050565b60006002820490506001821680620003cc57607f821691505b60208210811415620003e357620003e26200041f565b5b50919050565b620003f48262000491565b810181811067ffffffffffffffff821117156200041657620004156200044e565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b620004ad8162000349565b8114620004b957600080fd5b50565b612e2180620004cc6000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c806370a0823111610097578063a9059cbb11610066578063a9059cbb146102b0578063b48272cc146102e0578063dd62ed3e14610310578063fbfa77cf14610340576100f5565b806370a08231146102145780637ba692b61461024457806395d89b4114610262578063a457c2d714610280576100f5565b806323b872dd116100d357806323b872dd1461016657806324f178ff14610196578063313ce567146101c657806339509351146101e4576100f5565b806306fdde03146100fa578063095ea7b31461011857806318160ddd14610148575b600080fd5b61010261035e565b60405161010f91906122be565b60405180910390f35b610132600480360381019061012d91906119c1565b6103f0565b60405161013f91906121ce565b60405180910390f35b61015061040e565b60405161015d91906124c0565b60405180910390f35b610180600480360381019061017b919061196e565b610418565b60405161018d91906121ce565b60405180910390f35b6101b060048036038101906101ab9190611a2e565b610510565b6040516101bd91906121ce565b60405180910390f35b6101ce6107ed565b6040516101db91906124db565b60405180910390f35b6101fe60048036038101906101f991906119c1565b6107f6565b60405161020b91906121ce565b60405180910390f35b61022e60048036038101906102299190611901565b6108a2565b60405161023b91906124c0565b60405180910390f35b61024c6108ea565b6040516102599190612173565b60405180910390f35b61026a610914565b60405161027791906122be565b60405180910390f35b61029a600480360381019061029591906119c1565b6109a6565b6040516102a791906121ce565b60405180910390f35b6102ca60048036038101906102c591906119c1565b610a91565b6040516102d791906121ce565b60405180910390f35b6102fa60048036038101906102f59190611bd1565b610aaf565b60405161030791906121ce565b60405180910390f35b61032a6004803603810190610325919061192e565b610cd8565b60405161033791906124c0565b60405180910390f35b610348610d5f565b6040516103559190612173565b60405180910390f35b60606004805461036d9061283d565b80601f01602080910402602001604051908101604052809291908181526020018280546103999061283d565b80156103e65780601f106103bb576101008083540402835291602001916103e6565b820191906000526020600020905b8154815290600101906020018083116103c957829003601f168201915b5050505050905090565b60006104046103fd610d89565b8484610d91565b6001905092915050565b6000600354905090565b6000610425848484610f5c565b6000600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000610470610d89565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050828110156104f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e7906123a0565b60405180910390fd5b610504856104fc610d89565b858403610d91565b60019150509392505050565b600060828b511015610557576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054e90612460565b60405180910390fd5b60006105628c61126e565b90506097816000015160ff1614801561058257506001816020015160ff16145b6105c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b890612360565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff16816040015173ffffffffffffffffffffffffffffffffffffffff1614610633576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062a90612440565b60405180910390fd5b600260008260a00151815260200190815260200160002060009054906101000a900460ff1615610698576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068f90612480565b60405180910390fd5b6001600260008360a00151815260200190815260200160002060006101000a81548160ff0219169083151502179055506106da8c8c8c8c8c8c8c8c8c8c611397565b6000816060015190506000826080015190506106f8600083836114d0565b806003600082825461070a9190612712565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461075f9190612712565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516107c491906124c0565b60405180910390a36107d8600083836114d5565b600193505050509a9950505050505050505050565b60006009905090565b6000610898610803610d89565b848460016000610811610d89565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546108939190612712565b610d91565b6001905092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600580546109239061283d565b80601f016020809104026020016040519081016040528092919081815260200182805461094f9061283d565b801561099c5780601f106109715761010080835404028352916020019161099c565b820191906000526020600020905b81548152906001019060200180831161097f57829003601f168201915b5050505050905090565b600080600160006109b5610d89565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015610a72576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a69906124a0565b60405180910390fd5b610a86610a7d610d89565b85858403610d91565b600191505092915050565b6000610aa5610a9e610d89565b8484610f5c565b6001905092915050565b600080610aba610d89565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610b2c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b23906123c0565b60405180910390fd5b610b38816000856114d0565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905083811015610bbe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bb590612300565b60405180910390fd5b8381036000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508360036000828254610c159190612768565b92505081905550610c28826000866114d5565b7f2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e30878787604051610c5d949392919061218e565b60405180910390a1600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef86604051610cc391906124c0565b60405180910390a36001925050509392505050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610e01576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610df890612420565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610e71576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e6890612320565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051610f4f91906124c0565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610fcc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fc3906123e0565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561103c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611033906122e0565b60405180910390fd5b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156110cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110c490612380565b60405180910390fd5b6110d88383836114d0565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101561115e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161115590612340565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546111f19190612712565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161125591906124c0565b60405180910390a36112688484846114d5565b50505050565b6112766114da565b61127e6114da565b8260008151811061129257611291612908565b5b602001015160f81c60f81b60f81c816000019060ff16908160ff1681525050826001815181106112c5576112c4612908565b5b602001015160f81c60f81b60f81c816020019060ff16908160ff16815250506000806000806022870151935060428701519250606287015191506082870151905083856040019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505082856060019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505081856080018181525050808560a00181815250508495505050505050919050565b60008a8a6040516020016113ac92919061214b565b604051602081830303815290604052805190602001209050600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f65d21166001838d8d8d8d8d8d8d8d8d6040518c63ffffffff1660e01b81526004016114349b9a999897969594939291906121e9565b60206040518083038186803b15801561144c57600080fd5b505afa158015611460573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114849190611a01565b6114c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114ba90612400565b60405180910390fd5b5050505050505050505050565b505050565b505050565b6040518060c00160405280600060ff168152602001600060ff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600080191681525090565b60006115586115538461251b565b6124f6565b9050808382526020820190508285602086028201111561157b5761157a612970565b5b60005b858110156115ab57816115918882611814565b84526020840193506020830192505060018101905061157e565b5050509392505050565b60006115c86115c384612547565b6124f6565b905080838252602082019050828560208602820111156115eb576115ea612970565b5b60005b8581101561161b5781611601888261183e565b8452602084019350602083019250506001810190506115ee565b5050509392505050565b600061163861163384612573565b6124f6565b9050808382526020820190508285602086028201111561165b5761165a612970565b5b60005b8581101561168b578161167188826118d7565b84526020840193506020830192505060018101905061165e565b5050509392505050565b60006116a86116a38461259f565b6124f6565b905080838252602082019050828560208602820111156116cb576116ca612970565b5b60005b858110156116fb57816116e188826118ec565b8452602084019350602083019250506001810190506116ce565b5050509392505050565b6000611718611713846125cb565b6124f6565b90508281526020810184848401111561173457611733612975565b5b61173f8482856127fb565b509392505050565b60008135905061175681612d78565b92915050565b600082601f8301126117715761177061296b565b5b8135611781848260208601611545565b91505092915050565b600082601f83011261179f5761179e61296b565b5b81356117af8482602086016115b5565b91505092915050565b600082601f8301126117cd576117cc61296b565b5b81356117dd848260208601611625565b91505092915050565b600082601f8301126117fb576117fa61296b565b5b813561180b848260208601611695565b91505092915050565b60008135905061182381612d8f565b92915050565b60008151905061183881612d8f565b92915050565b60008135905061184d81612da6565b92915050565b600082601f8301126118685761186761296b565b5b8135611878848260208601611705565b91505092915050565b60008083601f8401126118975761189661296b565b5b8235905067ffffffffffffffff8111156118b4576118b3612966565b5b6020830191508360018202830111156118d0576118cf612970565b5b9250929050565b6000813590506118e681612dbd565b92915050565b6000813590506118fb81612dd4565b92915050565b6000602082840312156119175761191661297f565b5b600061192584828501611747565b91505092915050565b600080604083850312156119455761194461297f565b5b600061195385828601611747565b925050602061196485828601611747565b9150509250929050565b6000806000606084860312156119875761198661297f565b5b600061199586828701611747565b93505060206119a686828701611747565b92505060406119b7868287016118d7565b9150509250925092565b600080604083850312156119d8576119d761297f565b5b60006119e685828601611747565b92505060206119f7858286016118d7565b9150509250929050565b600060208284031215611a1757611a1661297f565b5b6000611a2584828501611829565b91505092915050565b6000806000806000806000806000806101408b8d031215611a5257611a5161297f565b5b60008b013567ffffffffffffffff811115611a7057611a6f61297a565b5b611a7c8d828e01611853565b9a50506020611a8d8d828e016118d7565b99505060408b013567ffffffffffffffff811115611aae57611aad61297a565b5b611aba8d828e0161178a565b98505060608b013567ffffffffffffffff811115611adb57611ada61297a565b5b611ae78d828e0161175c565b9750506080611af88d828e0161183e565b96505060a0611b098d828e0161183e565b95505060c08b013567ffffffffffffffff811115611b2a57611b2961297a565b5b611b368d828e016117b8565b94505060e08b013567ffffffffffffffff811115611b5757611b5661297a565b5b611b638d828e016117e6565b9350506101008b013567ffffffffffffffff811115611b8557611b8461297a565b5b611b918d828e0161178a565b9250506101208b013567ffffffffffffffff811115611bb357611bb261297a565b5b611bbf8d828e0161178a565b9150509295989b9194979a5092959850565b600080600060408486031215611bea57611be961297f565b5b600084013567ffffffffffffffff811115611c0857611c0761297a565b5b611c1486828701611881565b93509350506020611c27868287016118d7565b9150509250925092565b6000611c3d8383611e18565b60208301905092915050565b6000611c558383611e36565b60208301905092915050565b6000611c6d83836120f8565b60208301905092915050565b6000611c85838361212d565b60208301905092915050565b611c9a8161279c565b82525050565b6000611cab8261263c565b611cb581856126b2565b9350611cc0836125fc565b8060005b83811015611cf1578151611cd88882611c31565b9750611ce38361267e565b925050600181019050611cc4565b5085935050505092915050565b6000611d0982612647565b611d1381856126c3565b9350611d1e8361260c565b8060005b83811015611d4f578151611d368882611c49565b9750611d418361268b565b925050600181019050611d22565b5085935050505092915050565b6000611d6782612652565b611d7181856126d4565b9350611d7c8361261c565b8060005b83811015611dad578151611d948882611c61565b9750611d9f83612698565b925050600181019050611d80565b5085935050505092915050565b6000611dc58261265d565b611dcf81856126e5565b9350611dda8361262c565b8060005b83811015611e0b578151611df28882611c79565b9750611dfd836126a5565b925050600181019050611dde565b5085935050505092915050565b611e21816127ae565b82525050565b611e30816127ae565b82525050565b611e3f816127ba565b82525050565b611e4e816127ba565b82525050565b6000611e5f82612668565b611e6981856126f6565b9350611e7981856020860161280a565b80840191505092915050565b6000611e918385612701565b9350611e9e8385846127fb565b611ea783612984565b840190509392505050565b6000611ebd82612673565b611ec78185612701565b9350611ed781856020860161280a565b611ee081612984565b840191505092915050565b6000611ef8602383612701565b9150611f0382612995565b604082019050919050565b6000611f1b602283612701565b9150611f26826129e4565b604082019050919050565b6000611f3e602283612701565b9150611f4982612a33565b604082019050919050565b6000611f61602683612701565b9150611f6c82612a82565b604082019050919050565b6000611f84601a83612701565b9150611f8f82612ad1565b602082019050919050565b6000611fa7602a83612701565b9150611fb282612afa565b604082019050919050565b6000611fca602883612701565b9150611fd582612b49565b604082019050919050565b6000611fed602183612701565b9150611ff882612b98565b604082019050919050565b6000612010602583612701565b915061201b82612be7565b604082019050919050565b6000612033601e83612701565b915061203e82612c36565b602082019050919050565b6000612056602483612701565b915061206182612c5f565b604082019050919050565b6000612079601483612701565b915061208482612cae565b602082019050919050565b600061209c601383612701565b91506120a782612cd7565b602082019050919050565b60006120bf601983612701565b91506120ca82612d00565b602082019050919050565b60006120e2602583612701565b91506120ed82612d29565b604082019050919050565b612101816127e4565b82525050565b612110816127e4565b82525050565b612127612122826127e4565b6128a0565b82525050565b612136816127ee565b82525050565b612145816127ee565b82525050565b60006121578285611e54565b91506121638284612116565b6020820191508190509392505050565b60006020820190506121886000830184611c91565b92915050565b60006060820190506121a36000830187611c91565b81810360208301526121b6818587611e85565b90506121c56040830184612107565b95945050505050565b60006020820190506121e36000830184611e27565b92915050565b6000610160820190506121ff600083018e611e27565b61220c602083018d611e45565b612219604083018c612107565b818103606083015261222b818b611cfe565b9050818103608083015261223f818a611ca0565b905061224e60a0830189611e45565b61225b60c0830188611e45565b81810360e083015261226d8187611d5c565b90508181036101008301526122828186611dba565b90508181036101208301526122978185611cfe565b90508181036101408301526122ac8184611cfe565b90509c9b505050505050505050505050565b600060208201905081810360008301526122d88184611eb2565b905092915050565b600060208201905081810360008301526122f981611eeb565b9050919050565b6000602082019050818103600083015261231981611f0e565b9050919050565b6000602082019050818103600083015261233981611f31565b9050919050565b6000602082019050818103600083015261235981611f54565b9050919050565b6000602082019050818103600083015261237981611f77565b9050919050565b6000602082019050818103600083015261239981611f9a565b9050919050565b600060208201905081810360008301526123b981611fbd565b9050919050565b600060208201905081810360008301526123d981611fe0565b9050919050565b600060208201905081810360008301526123f981612003565b9050919050565b6000602082019050818103600083015261241981612026565b9050919050565b6000602082019050818103600083015261243981612049565b9050919050565b600060208201905081810360008301526124598161206c565b9050919050565b600060208201905081810360008301526124798161208f565b9050919050565b60006020820190508181036000830152612499816120b2565b9050919050565b600060208201905081810360008301526124b9816120d5565b9050919050565b60006020820190506124d56000830184612107565b92915050565b60006020820190506124f0600083018461213c565b92915050565b6000612500612511565b905061250c828261286f565b919050565b6000604051905090565b600067ffffffffffffffff82111561253657612535612937565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561256257612561612937565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561258e5761258d612937565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156125ba576125b9612937565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156125e6576125e5612937565b5b6125ef82612984565b9050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600061271d826127e4565b9150612728836127e4565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561275d5761275c6128aa565b5b828201905092915050565b6000612773826127e4565b915061277e836127e4565b925082821015612791576127906128aa565b5b828203905092915050565b60006127a7826127c4565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b8381101561282857808201518184015260208101905061280d565b83811115612837576000848401525b50505050565b6000600282049050600182168061285557607f821691505b60208210811415612869576128686128d9565b5b50919050565b61287882612984565b810181811067ffffffffffffffff8211171561289757612896612937565b5b80604052505050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20696e76616c696420696e737427732064617461000000000000600082015250565b7f45524332303a207472616e7366657220746f20696e636f676e69746f2076617560008201527f6c74206164647265737300000000000000000000000000000000000000000000602082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206160008201527f6c6c6f77616e6365000000000000000000000000000000000000000000000000602082015250565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20696e76616c696420696e707574206d696e7420646174610000600082015250565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20696e76616c696420746f6b656e000000000000000000000000600082015250565b7f45524332303a20696e76616c696420696e737400000000000000000000000000600082015250565b7f45524332303a20747820697320616c7265616479207573656400000000000000600082015250565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b612d818161279c565b8114612d8c57600080fd5b50565b612d98816127ae565b8114612da357600080fd5b50565b612daf816127ba565b8114612dba57600080fd5b50565b612dc6816127e4565b8114612dd157600080fd5b50565b612ddd816127ee565b8114612de857600080fd5b5056fea2646970667358221220bb71c9c1b70f5cff71dea8d198bb4ef4cb148fb23429e43942e023da081aa89164736f6c63430008070033",
}

// PrvbscABI is the input ABI used to generate the binding from.
// Deprecated: Use PrvbscMetaData.ABI instead.
var PrvbscABI = PrvbscMetaData.ABI

// PrvbscBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use PrvbscMetaData.Bin instead.
var PrvbscBin = PrvbscMetaData.Bin

// DeployPrvbsc deploys a new Ethereum contract, binding an instance of Prvbsc to it.
func DeployPrvbsc(auth *bind.TransactOpts, backend bind.ContractBackend, name_ string, symbol_ string, incognitoProxy_ common.Address, vault_ common.Address) (common.Address, *types.Transaction, *Prvbsc, error) {
	parsed, err := PrvbscMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(PrvbscBin), backend, name_, symbol_, incognitoProxy_, vault_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Prvbsc{PrvbscCaller: PrvbscCaller{contract: contract}, PrvbscTransactor: PrvbscTransactor{contract: contract}, PrvbscFilterer: PrvbscFilterer{contract: contract}}, nil
}

// Prvbsc is an auto generated Go binding around an Ethereum contract.
type Prvbsc struct {
	PrvbscCaller     // Read-only binding to the contract
	PrvbscTransactor // Write-only binding to the contract
	PrvbscFilterer   // Log filterer for contract events
}

// PrvbscCaller is an auto generated read-only Go binding around an Ethereum contract.
type PrvbscCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PrvbscTransactor is an auto generated write-only Go binding around an Ethereum contract.
type PrvbscTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PrvbscFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type PrvbscFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PrvbscSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type PrvbscSession struct {
	Contract     *Prvbsc           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// PrvbscCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type PrvbscCallerSession struct {
	Contract *PrvbscCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// PrvbscTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type PrvbscTransactorSession struct {
	Contract     *PrvbscTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// PrvbscRaw is an auto generated low-level Go binding around an Ethereum contract.
type PrvbscRaw struct {
	Contract *Prvbsc // Generic contract binding to access the raw methods on
}

// PrvbscCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type PrvbscCallerRaw struct {
	Contract *PrvbscCaller // Generic read-only contract binding to access the raw methods on
}

// PrvbscTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type PrvbscTransactorRaw struct {
	Contract *PrvbscTransactor // Generic write-only contract binding to access the raw methods on
}

// NewPrvbsc creates a new instance of Prvbsc, bound to a specific deployed contract.
func NewPrvbsc(address common.Address, backend bind.ContractBackend) (*Prvbsc, error) {
	contract, err := bindPrvbsc(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Prvbsc{PrvbscCaller: PrvbscCaller{contract: contract}, PrvbscTransactor: PrvbscTransactor{contract: contract}, PrvbscFilterer: PrvbscFilterer{contract: contract}}, nil
}

// NewPrvbscCaller creates a new read-only instance of Prvbsc, bound to a specific deployed contract.
func NewPrvbscCaller(address common.Address, caller bind.ContractCaller) (*PrvbscCaller, error) {
	contract, err := bindPrvbsc(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PrvbscCaller{contract: contract}, nil
}

// NewPrvbscTransactor creates a new write-only instance of Prvbsc, bound to a specific deployed contract.
func NewPrvbscTransactor(address common.Address, transactor bind.ContractTransactor) (*PrvbscTransactor, error) {
	contract, err := bindPrvbsc(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PrvbscTransactor{contract: contract}, nil
}

// NewPrvbscFilterer creates a new log filterer instance of Prvbsc, bound to a specific deployed contract.
func NewPrvbscFilterer(address common.Address, filterer bind.ContractFilterer) (*PrvbscFilterer, error) {
	contract, err := bindPrvbsc(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &PrvbscFilterer{contract: contract}, nil
}

// bindPrvbsc binds a generic wrapper to an already deployed contract.
func bindPrvbsc(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(PrvbscABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Prvbsc *PrvbscRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Prvbsc.Contract.PrvbscCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Prvbsc *PrvbscRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Prvbsc.Contract.PrvbscTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Prvbsc *PrvbscRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Prvbsc.Contract.PrvbscTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Prvbsc *PrvbscCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Prvbsc.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Prvbsc *PrvbscTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Prvbsc.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Prvbsc *PrvbscTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Prvbsc.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_Prvbsc *PrvbscCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Prvbsc.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_Prvbsc *PrvbscSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _Prvbsc.Contract.Allowance(&_Prvbsc.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_Prvbsc *PrvbscCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _Prvbsc.Contract.Allowance(&_Prvbsc.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_Prvbsc *PrvbscCaller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Prvbsc.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_Prvbsc *PrvbscSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _Prvbsc.Contract.BalanceOf(&_Prvbsc.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_Prvbsc *PrvbscCallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _Prvbsc.Contract.BalanceOf(&_Prvbsc.CallOpts, account)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_Prvbsc *PrvbscCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _Prvbsc.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_Prvbsc *PrvbscSession) Decimals() (uint8, error) {
	return _Prvbsc.Contract.Decimals(&_Prvbsc.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_Prvbsc *PrvbscCallerSession) Decimals() (uint8, error) {
	return _Prvbsc.Contract.Decimals(&_Prvbsc.CallOpts)
}

// IncognitoProxy is a free data retrieval call binding the contract method 0x7ba692b6.
//
// Solidity: function incognitoProxy() view returns(address)
func (_Prvbsc *PrvbscCaller) IncognitoProxy(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Prvbsc.contract.Call(opts, &out, "incognitoProxy")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// IncognitoProxy is a free data retrieval call binding the contract method 0x7ba692b6.
//
// Solidity: function incognitoProxy() view returns(address)
func (_Prvbsc *PrvbscSession) IncognitoProxy() (common.Address, error) {
	return _Prvbsc.Contract.IncognitoProxy(&_Prvbsc.CallOpts)
}

// IncognitoProxy is a free data retrieval call binding the contract method 0x7ba692b6.
//
// Solidity: function incognitoProxy() view returns(address)
func (_Prvbsc *PrvbscCallerSession) IncognitoProxy() (common.Address, error) {
	return _Prvbsc.Contract.IncognitoProxy(&_Prvbsc.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Prvbsc *PrvbscCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Prvbsc.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Prvbsc *PrvbscSession) Name() (string, error) {
	return _Prvbsc.Contract.Name(&_Prvbsc.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Prvbsc *PrvbscCallerSession) Name() (string, error) {
	return _Prvbsc.Contract.Name(&_Prvbsc.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Prvbsc *PrvbscCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Prvbsc.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Prvbsc *PrvbscSession) Symbol() (string, error) {
	return _Prvbsc.Contract.Symbol(&_Prvbsc.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Prvbsc *PrvbscCallerSession) Symbol() (string, error) {
	return _Prvbsc.Contract.Symbol(&_Prvbsc.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Prvbsc *PrvbscCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Prvbsc.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Prvbsc *PrvbscSession) TotalSupply() (*big.Int, error) {
	return _Prvbsc.Contract.TotalSupply(&_Prvbsc.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Prvbsc *PrvbscCallerSession) TotalSupply() (*big.Int, error) {
	return _Prvbsc.Contract.TotalSupply(&_Prvbsc.CallOpts)
}

// Vault is a free data retrieval call binding the contract method 0xfbfa77cf.
//
// Solidity: function vault() view returns(address)
func (_Prvbsc *PrvbscCaller) Vault(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Prvbsc.contract.Call(opts, &out, "vault")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Vault is a free data retrieval call binding the contract method 0xfbfa77cf.
//
// Solidity: function vault() view returns(address)
func (_Prvbsc *PrvbscSession) Vault() (common.Address, error) {
	return _Prvbsc.Contract.Vault(&_Prvbsc.CallOpts)
}

// Vault is a free data retrieval call binding the contract method 0xfbfa77cf.
//
// Solidity: function vault() view returns(address)
func (_Prvbsc *PrvbscCallerSession) Vault() (common.Address, error) {
	return _Prvbsc.Contract.Vault(&_Prvbsc.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_Prvbsc *PrvbscTransactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Prvbsc.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_Prvbsc *PrvbscSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Prvbsc.Contract.Approve(&_Prvbsc.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_Prvbsc *PrvbscTransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Prvbsc.Contract.Approve(&_Prvbsc.TransactOpts, spender, amount)
}

// Burn is a paid mutator transaction binding the contract method 0xb48272cc.
//
// Solidity: function burn(string incognitoAddress, uint256 amount) returns(bool)
func (_Prvbsc *PrvbscTransactor) Burn(opts *bind.TransactOpts, incognitoAddress string, amount *big.Int) (*types.Transaction, error) {
	return _Prvbsc.contract.Transact(opts, "burn", incognitoAddress, amount)
}

// Burn is a paid mutator transaction binding the contract method 0xb48272cc.
//
// Solidity: function burn(string incognitoAddress, uint256 amount) returns(bool)
func (_Prvbsc *PrvbscSession) Burn(incognitoAddress string, amount *big.Int) (*types.Transaction, error) {
	return _Prvbsc.Contract.Burn(&_Prvbsc.TransactOpts, incognitoAddress, amount)
}

// Burn is a paid mutator transaction binding the contract method 0xb48272cc.
//
// Solidity: function burn(string incognitoAddress, uint256 amount) returns(bool)
func (_Prvbsc *PrvbscTransactorSession) Burn(incognitoAddress string, amount *big.Int) (*types.Transaction, error) {
	return _Prvbsc.Contract.Burn(&_Prvbsc.TransactOpts, incognitoAddress, amount)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_Prvbsc *PrvbscTransactor) DecreaseAllowance(opts *bind.TransactOpts, spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _Prvbsc.contract.Transact(opts, "decreaseAllowance", spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_Prvbsc *PrvbscSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _Prvbsc.Contract.DecreaseAllowance(&_Prvbsc.TransactOpts, spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_Prvbsc *PrvbscTransactorSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _Prvbsc.Contract.DecreaseAllowance(&_Prvbsc.TransactOpts, spender, subtractedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_Prvbsc *PrvbscTransactor) IncreaseAllowance(opts *bind.TransactOpts, spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _Prvbsc.contract.Transact(opts, "increaseAllowance", spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_Prvbsc *PrvbscSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _Prvbsc.Contract.IncreaseAllowance(&_Prvbsc.TransactOpts, spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_Prvbsc *PrvbscTransactorSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _Prvbsc.Contract.IncreaseAllowance(&_Prvbsc.TransactOpts, spender, addedValue)
}

// Mint is a paid mutator transaction binding the contract method 0x24f178ff.
//
// Solidity: function mint(bytes inst, uint256 heights, bytes32[] instPaths, bool[] instPathIsLefts, bytes32 instRoots, bytes32 blkData, uint256[] sigIdxs, uint8[] sigVs, bytes32[] sigRs, bytes32[] sigSs) returns(bool)
func (_Prvbsc *PrvbscTransactor) Mint(opts *bind.TransactOpts, inst []byte, heights *big.Int, instPaths [][32]byte, instPathIsLefts []bool, instRoots [32]byte, blkData [32]byte, sigIdxs []*big.Int, sigVs []uint8, sigRs [][32]byte, sigSs [][32]byte) (*types.Transaction, error) {
	return _Prvbsc.contract.Transact(opts, "mint", inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// Mint is a paid mutator transaction binding the contract method 0x24f178ff.
//
// Solidity: function mint(bytes inst, uint256 heights, bytes32[] instPaths, bool[] instPathIsLefts, bytes32 instRoots, bytes32 blkData, uint256[] sigIdxs, uint8[] sigVs, bytes32[] sigRs, bytes32[] sigSs) returns(bool)
func (_Prvbsc *PrvbscSession) Mint(inst []byte, heights *big.Int, instPaths [][32]byte, instPathIsLefts []bool, instRoots [32]byte, blkData [32]byte, sigIdxs []*big.Int, sigVs []uint8, sigRs [][32]byte, sigSs [][32]byte) (*types.Transaction, error) {
	return _Prvbsc.Contract.Mint(&_Prvbsc.TransactOpts, inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// Mint is a paid mutator transaction binding the contract method 0x24f178ff.
//
// Solidity: function mint(bytes inst, uint256 heights, bytes32[] instPaths, bool[] instPathIsLefts, bytes32 instRoots, bytes32 blkData, uint256[] sigIdxs, uint8[] sigVs, bytes32[] sigRs, bytes32[] sigSs) returns(bool)
func (_Prvbsc *PrvbscTransactorSession) Mint(inst []byte, heights *big.Int, instPaths [][32]byte, instPathIsLefts []bool, instRoots [32]byte, blkData [32]byte, sigIdxs []*big.Int, sigVs []uint8, sigRs [][32]byte, sigSs [][32]byte) (*types.Transaction, error) {
	return _Prvbsc.Contract.Mint(&_Prvbsc.TransactOpts, inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_Prvbsc *PrvbscTransactor) Transfer(opts *bind.TransactOpts, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Prvbsc.contract.Transact(opts, "transfer", recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_Prvbsc *PrvbscSession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Prvbsc.Contract.Transfer(&_Prvbsc.TransactOpts, recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_Prvbsc *PrvbscTransactorSession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Prvbsc.Contract.Transfer(&_Prvbsc.TransactOpts, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_Prvbsc *PrvbscTransactor) TransferFrom(opts *bind.TransactOpts, sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Prvbsc.contract.Transact(opts, "transferFrom", sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_Prvbsc *PrvbscSession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Prvbsc.Contract.TransferFrom(&_Prvbsc.TransactOpts, sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_Prvbsc *PrvbscTransactorSession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Prvbsc.Contract.TransferFrom(&_Prvbsc.TransactOpts, sender, recipient, amount)
}

// PrvbscApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the Prvbsc contract.
type PrvbscApprovalIterator struct {
	Event *PrvbscApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PrvbscApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PrvbscApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PrvbscApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PrvbscApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PrvbscApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PrvbscApproval represents a Approval event raised by the Prvbsc contract.
type PrvbscApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_Prvbsc *PrvbscFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*PrvbscApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _Prvbsc.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &PrvbscApprovalIterator{contract: _Prvbsc.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_Prvbsc *PrvbscFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *PrvbscApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _Prvbsc.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PrvbscApproval)
				if err := _Prvbsc.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_Prvbsc *PrvbscFilterer) ParseApproval(log types.Log) (*PrvbscApproval, error) {
	event := new(PrvbscApproval)
	if err := _Prvbsc.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PrvbscDepositIterator is returned from FilterDeposit and is used to iterate over the raw logs and unpacked data for Deposit events raised by the Prvbsc contract.
type PrvbscDepositIterator struct {
	Event *PrvbscDeposit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PrvbscDepositIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PrvbscDeposit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PrvbscDeposit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PrvbscDepositIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PrvbscDepositIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PrvbscDeposit represents a Deposit event raised by the Prvbsc contract.
type PrvbscDeposit struct {
	Token            common.Address
	IncognitoAddress string
	Amount           *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterDeposit is a free log retrieval operation binding the contract event 0x2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e.
//
// Solidity: event Deposit(address token, string incognitoAddress, uint256 amount)
func (_Prvbsc *PrvbscFilterer) FilterDeposit(opts *bind.FilterOpts) (*PrvbscDepositIterator, error) {

	logs, sub, err := _Prvbsc.contract.FilterLogs(opts, "Deposit")
	if err != nil {
		return nil, err
	}
	return &PrvbscDepositIterator{contract: _Prvbsc.contract, event: "Deposit", logs: logs, sub: sub}, nil
}

// WatchDeposit is a free log subscription operation binding the contract event 0x2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e.
//
// Solidity: event Deposit(address token, string incognitoAddress, uint256 amount)
func (_Prvbsc *PrvbscFilterer) WatchDeposit(opts *bind.WatchOpts, sink chan<- *PrvbscDeposit) (event.Subscription, error) {

	logs, sub, err := _Prvbsc.contract.WatchLogs(opts, "Deposit")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PrvbscDeposit)
				if err := _Prvbsc.contract.UnpackLog(event, "Deposit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeposit is a log parse operation binding the contract event 0x2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e.
//
// Solidity: event Deposit(address token, string incognitoAddress, uint256 amount)
func (_Prvbsc *PrvbscFilterer) ParseDeposit(log types.Log) (*PrvbscDeposit, error) {
	event := new(PrvbscDeposit)
	if err := _Prvbsc.contract.UnpackLog(event, "Deposit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PrvbscTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the Prvbsc contract.
type PrvbscTransferIterator struct {
	Event *PrvbscTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PrvbscTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PrvbscTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PrvbscTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PrvbscTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PrvbscTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PrvbscTransfer represents a Transfer event raised by the Prvbsc contract.
type PrvbscTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_Prvbsc *PrvbscFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*PrvbscTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Prvbsc.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &PrvbscTransferIterator{contract: _Prvbsc.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_Prvbsc *PrvbscFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *PrvbscTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Prvbsc.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PrvbscTransfer)
				if err := _Prvbsc.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_Prvbsc *PrvbscFilterer) ParseTransfer(log types.Log) (*PrvbscTransfer, error) {
	event := new(PrvbscTransfer)
	if err := _Prvbsc.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
